//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import java.util.Map.Entry;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class ir_visitor<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	private LinkedHashMap<String,Class_info> symbol_tab=new LinkedHashMap<String,Class_info>();
	int ir_temp = 30;
	int ir_label=0;
	int double_nesting=0;
	int coming_from_not=0;
	int triple_nesting=0;
	private LinkedHashMap<String,method> methods=new LinkedHashMap<String,method>();
	private LinkedHashMap<String,String> vars=new LinkedHashMap<String,String>();
	private LinkedHashMap<String,String> params=new LinkedHashMap<String,String>();
	private LinkedHashMap<String,String> locals=new LinkedHashMap<String,String>();
	private Class_info Class_info_temp = new Class_info();
	private String meth_name =  new String();
	private String class_name = new String();
	int check_if_coming_from_new_or_not=0;
	int v_table_temp;
	int coming_from_array_length=0;
	int coming_from_itf=0;
	int coming_from_message_send=0;
	int object_temp;
	int coming_from_array_allocation=0;
	String print_in_msg_send = new String();
	int non_method=0;
	int class_type_or_not=0;
	int in_main=0;
	int object_assigned_to;
	int coming_from_array_lookup=0;
	int object_assigning;
	int times=0;
	int going_into_nesting=0;
	int coming_from_expression_list=0;
	int in_assignment =0;
	String identifier_type1= new String(); //contains the real type of the identifier
	String identifier_type = new String();
	int coming_from_new=0;
	
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      
    //TA CODE:
      
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      
    //TA CODE:
      
      return _ret;
   }
   public void get_symbol_table(LinkedHashMap<String,Class_info> symbol_table)
   {
	   symbol_tab =  symbol_table;
   }
   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n) {
      R _ret=null;
      
      
      System.out.println("MAIN");
    //  System.out.println("	PRINT");
      n.f0.accept(this);
      class_name = (String)n.f1.accept(this);
      //System.out.println("check main"+class_name);
      meth_name="main";
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
   
      n.f15.accept(this);
      n.f16.accept(this);
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      class_name=n.f1.f0.toString();
      meth_name="";
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      meth_name="";
  	  class_name=n.f1.f0.toString();
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n) {
	   
	//  System.out.println(n.f0.f0.toString());
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      
      meth_name = (String)n.f2.accept(this);
      int number_of_params = symbol_tab.get(class_name).methods.get(meth_name).params.size();
      System.out.println(class_name+"_"+meth_name+"["+ (number_of_params+1)+"]");
      System.out.println("\n BEGIN");
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
     
      
     
      identifier_type="";
      String id2 =(String) n.f10.accept(this);
      String s2 = new String();
      if(identifier_type.equals(""))
		  s2=id2;  
	  else
	  {	  
		  s2=identifier_type;
		  identifier_type="";
	  }
   // System.out.println("s2 and id is" + s2 +" "+id2);
      if(coming_from_message_send==0 && coming_from_new==0)
      {
	      if(symbol_tab.get(class_name).methods.get(meth_name)!=null)
	      {
			  if(symbol_tab.get(class_name).methods.get(meth_name).locals.get(id2)!=null) //do move for locals.
				  System.out.println("RETURN "+s2);
			  else if(symbol_tab.get(class_name).methods.get(meth_name).params.get(id2)!=null) //if it is a param
				  System.out.println("RETURN "+s2);
			  else if(symbol_tab.get(class_name).vars.get(id2)!=null)//if it is a variable then access through temp0 and offset
			  {
				  int v_table_entry = ir_temp++;
				  System.out.println("RETURN");
				  System.out.println("\n BEGIN");
			      System.out.println("	HLOAD TEMP "+ v_table_entry+" TEMP 0 "+s2);
				  System.out.println("RETURN TEMP "+v_table_entry);
				  System.out.println("END");
			  }
			  else if(s2!=null)
				  System.out.println("RETURN "+s2);
		  }
		  else if(symbol_tab.get(class_name).vars.get(id2)!=null)//if it is a variable then access through temp0 and offset
		  {
			  int v_table_entry = ir_temp++;
			  System.out.println("RETURN");
			  System.out.println("\n BEGIN");
		      System.out.println("	HLOAD TEMP "+ v_table_entry+" TEMP 0 "+s2);
			  System.out.println("RETURN TEMP "+v_table_entry);
			  System.out.println("END");
		  }
		  else if(s2!=null)
			  System.out.println("RETURN "+s2);
	      
	    //  System.out.println("type check "+type2);
      }
      else if(s2!=null)
		  System.out.println("RETURN "+s2);
      n.f11.accept(this);
      n.f12.accept(this);
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      // 
      return _ret
      ;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n) {
      R _ret=null;
     // String s = (String) n.f0.accept(this);
      //System.out.println(s);
      return n.f0.accept(this);
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n) {
      R _ret=null;
      //System.out.println("BEGIN");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      //System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n) {
      R _ret=null;
      
      //TA CODE:
      
      identifier_type="";
      in_assignment=1;
     // System.out.println("not check");
      coming_from_array_lookup=0;
      String id= (String)n.f0.accept(this);
      String s=new String();
     // System.out.println("fuckme");
      if(identifier_type.equals(""))
		  s=id;  
	  else
	  {	  
		  s=identifier_type; //it is the TEMP for identifier.
		  identifier_type="";
	  }
     
      String return_temp = new String();
      //System.out.print("check"+class_name+" " +meth_name+" "+id);
   //   System.out.println(symbol_tab.get(class_name).methods.get(meth_name));
      if(symbol_tab.get(class_name).vars.get(id)!=null)//if it is a variable then access through temp0 and offset
		  System.out.print("	HSTORE TEMP 0 "+s);
	  if(symbol_tab.get(class_name).methods.get(meth_name).locals.get(id)!=null) //do move for locals.
		  System.out.print("	MOVE "+s);
	  else if(symbol_tab.get(class_name).methods.get(meth_name).params.get(id)!=null) //if it is a param
		  System.out.print ("	MOVE "+s);
	   
      n.f1.accept(this);
      in_assignment=1;
      identifier_type="";
      coming_from_message_send=0;
      coming_from_new=0;
      coming_from_array_allocation=0;
      coming_from_array_lookup=0;
      
      String id2= (String)n.f2.accept(this);
      String s2=new String();
      
      if(identifier_type.equals(""))
		  s2=id2;  
	  else
	  {	  
		  s2=identifier_type;
		  identifier_type="";
	  }
     // System.out.println("check exp"+id2);
      if(coming_from_message_send==0 && coming_from_new==0 && coming_from_array_allocation==0 && coming_from_array_lookup==0)
      {
    	  if(symbol_tab.get(class_name).methods.get(meth_name)!=null)
	      {
			  if(symbol_tab.get(class_name).methods.get(meth_name).locals.get(id2)!=null) //do move for locals.
				  System.out.println(" " +s2);
			  else if(symbol_tab.get(class_name).methods.get(meth_name).params.get(id2)!=null) //if it is a param
				  System.out.println(" " +s2);
			  else if(symbol_tab.get(class_name).vars.get(id2)!=null)//if it is a variable then access through temp0 and offset
			  {
				  int v_table_entry = ir_temp++;
				  System.out.println("\n BEGIN");
			      System.out.println("	HLOAD TEMP "+ v_table_entry+" TEMP 0 "+s2);
				  System.out.println("RETURN TEMP "+v_table_entry);
				  System.out.println("END");
			  }
			  else
				  System.out.println(" " +s2);
		  }
		  else if(symbol_tab.get(class_name).vars.get(id2)!=null)//if it is a variable then access through temp0 and offset
		  {
			  int v_table_entry = ir_temp++;
			  System.out.println("\n BEGIN");
		      System.out.println("	HLOAD TEMP "+ v_table_entry+" TEMP 0 "+s2);
			  System.out.println("RETURN TEMP "+v_table_entry);
			  System.out.println("END");
		  }
		  else if(s2!=null)
			  System.out.println(s2);
      }
       if(coming_from_new==1 )
      {
    	  String []tokens = s.split(" ");
    	  if(tokens.length!=1)
    		  object_temp = Integer.parseInt(tokens[1]);
    	  coming_from_new=0;
      }
       if(coming_from_message_send ==1)
    	   coming_from_message_send=0;
      
      n.f3.accept(this);
      return (R)_ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n) {
      R _ret=null;
      identifier_type="";
      int var=0;
      int var1=0;
      int var2=0;
      int param=0;
      int param1=0;
      int param2=0;
      int local=0;
      int local1=0;
      int local2=0;
      String id= (String)n.f0.accept(this);
      String s=new String();
      
      if(identifier_type.equals(""))
		  s=id;  
	  else
	  {	  
		  s=identifier_type;
		  identifier_type="";
	  }
      
      if(symbol_tab.get(class_name).methods.get(meth_name).locals.get(id)!=null)
    	  local=1;
      else if(symbol_tab.get(class_name).methods.get(meth_name).params.get(id)!=null)
    	  param=1;
      else if(symbol_tab.get(class_name).vars.get(id)!=null)
    	  var=1;
      
      int base_addr=ir_temp++;
      int identifier_offset=ir_temp++;
      System.out.println("	HSTORE PLUS");
      
      if(var==1)
      {
    	  
    	  System.out.println("BEGIN");
    	  System.out.println("	MOVE TEMP "+identifier_offset+" "+s);
    	  
    	  System.out.println("	HLOAD TEMP "+base_addr+" PLUS TEMP 0 TEMP "+identifier_offset+" 0");
    	  System.out.println("RETURN");
    	  System.out.println("	TEMP "+base_addr);
    	  System.out.println("END");
      }
      else if(local==1 || param==1)
      {
    	  System.out.println(s); 
      }
      System.out.println("	PLUS");
      
      
      n.f1.accept(this);
      identifier_type="";
      String id1= (String)n.f2.accept(this);
      String s1=new String();
      
      if(identifier_type.equals(""))
		  s1=id1;  
	  else
	  {	  
		  s1=identifier_type;
		  identifier_type="";
	  }
      
      if(symbol_tab.get(class_name).methods.get(meth_name).locals.get(id1)!=null)
    	  local1=1;
      else if(symbol_tab.get(class_name).methods.get(meth_name).params.get(id1)!=null)
    	  param1=1;
      else if(symbol_tab.get(class_name).vars.get(id1)!=null)
    	  var1=1;
      
     
      
      
      if(var1==1)
  	{
    	  int offset = ir_temp++;
    	  int identifier_offset1=ir_temp++;
    	  int base_addr1=ir_temp++;
    	  System.out.println("BEGIN");
  		System.out.println("MOVE TEMP "+offset+" TIMES ");
  		System.out.println("BEGIN");
  		int temp = ir_temp++;
  		System.out.println("	HLOAD TEMP "+temp +" TEMP 0 "+s1);
  		System.out.println("RETURN");
  		System.out.println("TEMP "+temp);
  		System.out.println("END");
  		System.out.println("4");
  		System.out.println("RETURN TEMP "+offset);
	    	System.out.println("END");
	    	System.out.println("	HLOAD TEMP "+base_addr1+" PLUS TEMP 0 TEMP "+identifier_offset1+" 0");
	    	  System.out.println("RETURN");
	    	  System.out.println("	TEMP "+base_addr1);
	    	  System.out.println("END");
	    	System.out.println("4 0");
	    
  		
  	}
  	else //if(local1==1 || param1==1)
  	{
  		 int offset = ir_temp++;
   	  int identifier_offset1=ir_temp++;
   	  int base_addr1=ir_temp++;
  		System.out.println("BEGIN");
	    	System.out.println("MOVE TEMP "+offset+" TIMES "+s1+" 4");
	    	//System.out.println("MOVE TEMP "+offset+" PLUS TEMP "+offset+" 4");
	    	System.out.println("RETURN TEMP "+offset);
	    	System.out.println("END");
	    	System.out.println("4 0");
      }
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      n.f3.accept(this);
      n.f4.accept(this);
      identifier_type="";
      coming_from_array_lookup=0;
      coming_from_array_length=0;
      coming_from_array_allocation=0;
      String id2= (String)n.f5.accept(this);
      String s2=new String();
      
      if(identifier_type.equals(""))
		  s2=id2;  
	  else
	  {	  
		  s2=identifier_type;
		  identifier_type="";
	  }
      
      if(symbol_tab.get(class_name).methods.get(meth_name).locals.get(id2)!=null)
    	  local2=1;
      else if(symbol_tab.get(class_name).methods.get(meth_name).params.get(id2)!=null)
    	  param2=1;
      else if(symbol_tab.get(class_name).vars.get(id2)!=null)
    	  var2=1;
     
      
      //System.out.println("checking array lookup"+coming_from_array_lookup);
      
  
   
      
      
      if(coming_from_array_allocation==0 && coming_from_array_length==0 && coming_from_array_lookup==0)
      {
	    	  if(var2==1)
	      {
	    	  int identifier_offset2=ir_temp++;
	    	  int base_addr2=ir_temp++;
	    	  System.out.println("BEGIN");
	    	  System.out.println("	MOVE TEMP "+identifier_offset2+" "+s2);
	    	  System.out.println("	HLOAD TEMP "+base_addr2+" PLUS TEMP 0 TEMP "+identifier_offset2+" 0");
	    	  System.out.println("RETURN");
	    	  System.out.println("	TEMP "+base_addr2);
	    	  System.out.println("END");
	      }
	      else 
	      {
	    	  System.out.println(s2); 
	      }
      }
      coming_from_array_lookup=0;
      coming_from_array_length=0;
      coming_from_array_allocation=0;
      
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n) {
      R _ret=null;
      n.f0.accept(this);
      System.out.print("	CJUMP ");
      n.f1.accept(this);
      coming_from_message_send=0;
      coming_from_new=0;
      coming_from_array_lookup=0;
      String id2 = (String)  n.f2.accept(this);
      String s2 = new String();
      if(identifier_type.equals(""))
		  s2=id2;  
	  else
	  {	  
		  s2=identifier_type;
		  identifier_type="";
	  }
      
      if(coming_from_message_send ==0 && coming_from_new==0 && coming_from_array_lookup==0)
      {
    	    {
    	    	  if(symbol_tab.get(class_name).methods.get(meth_name)!=null)
    		      {
    				  if(symbol_tab.get(class_name).methods.get(meth_name).locals.get(id2)!=null) //do move for locals.
    					  System.out.println(" " +s2);
    				  else if(symbol_tab.get(class_name).methods.get(meth_name).params.get(id2)!=null) //if it is a param
    					  System.out.println(" " +s2);
    				  else if(symbol_tab.get(class_name).vars.get(id2)!=null)//if it is a variable then access through temp0 and offset
    				  {
    					  int v_table_entry = ir_temp++;
    					  System.out.println("\n BEGIN");
    				      System.out.println("	HLOAD TEMP "+ v_table_entry+" TEMP 0 "+s2);
    					  System.out.println("RETURN TEMP "+v_table_entry);
    					  System.out.println("END");
    				  }
    				  else
    					  System.out.println(" " +s2);
    			  }
    			  else if(symbol_tab.get(class_name).vars.get(id2)!=null)//if it is a variable then access through temp0 and offset
    			  {
    				  int v_table_entry = ir_temp++;
    				  System.out.println("\n BEGIN");
    			      System.out.println("	HLOAD TEMP "+ v_table_entry+" TEMP 0 "+s2);
    				  System.out.println("RETURN TEMP "+v_table_entry);
    				  System.out.println("END");
    			  }
    			  else if(s2!=null)
    				  System.out.println(s2);
    	      }
      }
      coming_from_message_send=0;
      coming_from_new=0;
      int new_label = ir_label++;
      System.out.println(" L"+new_label);
      n.f3.accept(this);
      n.f4.accept(this);
      int jump_label = ir_label++;
      System.out.println("	JUMP L"+jump_label);
      System.out.print("L"+new_label);
      n.f5.accept(this);
      n.f6.accept(this);
      System.out.println("L"+jump_label+"	NOOP");
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n) {
      R _ret=null;
      int  BEGIN_label = ir_label++;
      int b_true_label = ir_label++;
      int b_false_label = ir_label++;
      n.f0.accept(this);
      n.f1.accept(this);
      System.out.println("L"+ BEGIN_label+" CJUMP ");
      coming_from_array_lookup=0;
      String id2 = (String)  n.f2.accept(this);
      String s2 = new String();
      if(identifier_type.equals(""))
		  s2=id2;  
	  else
	  {	  
		  s2=identifier_type;
		  identifier_type="";
	  }
      if(coming_from_message_send ==0 && coming_from_new==0 && coming_from_array_lookup==0)
      {
    	    {
    	    	  if(symbol_tab.get(class_name).methods.get(meth_name)!=null)
    		      {
    				  if(symbol_tab.get(class_name).methods.get(meth_name).locals.get(id2)!=null) //do move for locals.
    					  System.out.println(" " +s2);
    				  else if(symbol_tab.get(class_name).methods.get(meth_name).params.get(id2)!=null) //if it is a param
    					  System.out.println(" " +s2);
    				  else if(symbol_tab.get(class_name).vars.get(id2)!=null)//if it is a variable then access through temp0 and offset
    				  {
    					  int v_table_entry = ir_temp++;
    					  System.out.println("\n BEGIN");
    				      System.out.println("	HLOAD TEMP "+ v_table_entry+" TEMP 0 "+s2);
    					  System.out.println("RETURN TEMP "+v_table_entry);
    					  System.out.println("END");
    				  }
    				  else
    					  System.out.println(" " +s2);
    			  }
    			  else if(symbol_tab.get(class_name).vars.get(id2)!=null)//if it is a variable then access through temp0 and offset
    			  {
    				  int v_table_entry = ir_temp++;
    				  System.out.println("\n BEGIN");
    			      System.out.println("	HLOAD TEMP "+ v_table_entry+" TEMP 0 "+s2);
    				  System.out.println("RETURN TEMP "+v_table_entry);
    				  System.out.println("END");
    			  }
    			  else if(s2!=null)
    				  System.out.println(s2);
    	      }
      }
    	coming_from_message_send=0;
    	coming_from_new=0;
    	System.out.println(" L"+b_false_label);
      n.f3.accept(this);
      n.f4.accept(this);
      System.out.println("JUMP L"+ BEGIN_label);
      System.out.println("L"+b_false_label+"	NOOP");
      //System.out.println("\n BEGIN true and false labels are "+\n BEGIN_label+" "+b_true_label+" "+ b_false_label);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n) {
      R _ret=null;
      
      n.f0.accept(this);
      n.f1.accept(this);
      coming_from_array_length=0;
      System.out.print("	PRINT ");
      identifier_type="";
      coming_from_array_lookup=0 ;
      String id= (String)n.f2.accept(this);
      String s=new String();
      String return_temp = new String();
      if(identifier_type.equals(""))
		  s=id;  
	  else
	  {	  
		  s=identifier_type; //contains the temporary.
		  identifier_type="";
	  }
     // System.out.println("working" + accpt);
      n.f3.accept(this);
     // if(accpt!=null)
    	//  System.out.println(accpt);
      if(s!=null && coming_from_array_length==0 && coming_from_array_lookup==0 )
    	  System.out.println( s);
      n.f4.accept(this);
      return (R)_ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n) {
      R _ret=null;
      String s = (String)n.f0.accept(this);
      //System.out.println(s);
      //return n.f0.accept(this);
      return (R)s;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n) {
	   
	   	  int output = ir_temp++;
	      int return_label = ir_label++;
	      
	   
	      times=1;
	      print_in_msg_send = '\n' +"BEGIN" +'\n'+"	MOVE TEMP "+output+" 0 \n CJUMP";
	      coming_from_array_length=0;
	      coming_from_array_lookup=0;
	      coming_from_message_send=0;
	      coming_from_not=0;
	      String id= (String)n.f0.accept(this);
	      String s=new String();
	      int var=0;
	      if(symbol_tab.get(class_name).vars.get(id)!=null)
	    	  var=1;
	      String return_temp =new String();
	      return_temp = "";
	      if(identifier_type.equals(""))
			  s=id;  
		  else
		  {	  
			  s=identifier_type; //contains the temporary.
			  identifier_type="";
		  }
	      if(coming_from_array_length==0 && coming_from_array_lookup==0 && coming_from_message_send==0)
	      {
	    	  if(var==1)
	          {
	        	  //System.out.println("check1 " + id +" " +id2);
	        	  int arg1=ir_temp++;
	        	  if(coming_from_not==0)
	        		  return_temp='\n' +"BEGIN" +'\n'+"	MOVE TEMP "+output+" 0 "+"CJUMP ";
	              return_temp = return_temp + "\n BEGIN \n 	HLOAD TEMP "+arg1+" TEMP 0 "+ s+"\n RETURN TEMP "+arg1+"\n END ";
	              return_temp = return_temp+ " L"+return_label;
	          }
	      
	          else if (var ==0)
	          {
	        	//  System.out.println("check3 " + id +" " +id2);
	        	  if(coming_from_not==0)
	        	  {
	        	  	return_temp='\n' +"BEGIN" +'\n'+"	MOVE TEMP "+output+" 0 "+"CJUMP ";
	        	  	//return_temp = return_temp+ s;  
	        	  }
	        	  	return_temp = return_temp+s+ " L"+return_label;
	          }
	    	  times=1;
	          print_in_msg_send = return_temp;
	      
	      }
	      else
	      {
	    	  
	    	  System.out.println(" L"+return_label);
	      }
	      coming_from_array_length=0;
	      coming_from_array_lookup=0;
	      coming_from_message_send=0;
	      n.f1.accept(this);
	      times=1;
	      print_in_msg_send = print_in_msg_send + " CJUMP ";
	      if(coming_from_not==1)
	    	  return_temp="";
	      identifier_type="";
	      String id2= (String)n.f2.accept(this);
	      times=0;
	      String s2=new String();
	      if(identifier_type.equals(""))
			  s2=id2;  
		  else
		  {	  
			  s2=identifier_type; //contains the temporary.
			  identifier_type="";
		  }
	      int var2=0;
	      
	      if(symbol_tab.get(class_name).vars.get(id2)!=null)
	    	  var2=1;
	      if(coming_from_message_send==0 && coming_from_new==0 && coming_from_array_allocation==0 && coming_from_array_lookup==0)
	      {
	    	  if (var2 ==1)
	          {
	        	//  System.out.println("check3 " + id +" " +id2);
	        	  	int arg1=ir_temp++;
	        	  	if(coming_from_not==0)
	        	  		 return_temp = return_temp +"	CJUMP ";
	            	  return_temp = return_temp + s2+" L"+return_label;
	            	  return_temp = return_temp + "\n BEGIN \n 	HLOAD TEMP "+arg1+" TEMP 0 "+ s2+"\n RETURN TEMP "+arg1+"\n END ";
	          }
	          else
	          {
	        	//  System.out.println("check4 " + id +" " +id2);
	        		if(coming_from_not==0)
	        	  		 return_temp = return_temp +"	CJUMP ";
	        	  return_temp = return_temp+ s2;
	          } 
	     
	      }
	    	  return_temp = return_temp + " L"+return_label;
      return_temp =return_temp+ '\n' + "	MOVE TEMP "+output+" 1";
      return_temp =return_temp+ '\n' +"L"+return_label+" NOOP";
      return_temp =return_temp+ '\n' +"RETURN TEMP " +output ;
      return_temp=return_temp+ '\n' +" END";
      coming_from_array_length=0;
      coming_from_array_lookup=0;
      coming_from_message_send=0;
      return (R)return_temp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n) {
      R _ret=null;
      times=1;
      print_in_msg_send = "LT ";
      coming_from_array_length=0;
      coming_from_array_lookup=0;
      coming_from_message_send=0;
      String id= (String)n.f0.accept(this);
      String s=new String();
      int var=0;
      if(symbol_tab.get(class_name).vars.get(id)!=null)
    	  var=1;
      String return_temp =new String();
      return_temp = "";
      if(identifier_type.equals(""))
		  s=id;  
	  else
	  {	  
		  s=identifier_type; //contains the temporary.
		  identifier_type="";
	  }
      if(coming_from_array_length==0 && coming_from_array_lookup==0 && coming_from_message_send==0)
      {
    	  if(var==1)
          {
        	  //System.out.println("check1 " + id +" " +id2);
        	  int arg1=ir_temp++;
        	  return_temp=" LT ";
              return_temp = return_temp + "\n BEGIN \n 	HLOAD TEMP "+arg1+" TEMP 0 "+ s+"\n RETURN TEMP "+arg1+"\n END ";
             
          }
      
          else if (var ==0)
          {
        	//  System.out.println("check3 " + id +" " +id2);
        	  	int arg1=ir_temp++;
        	  	return_temp=" LT ";
            	  return_temp = return_temp + s;
          }
      
      }
      coming_from_array_length=0;
      coming_from_array_lookup=0;
      coming_from_message_send=0;
      print_in_msg_send="";
      if(return_temp!="")//not got printed
      {
    	  times=1;
          print_in_msg_send = return_temp;
      }
      n.f1.accept(this);
      times=1;
      
      identifier_type="";
      String id2= (String)n.f2.accept(this);
      times=0;
      String s2=new String();
      if(identifier_type.equals(""))
		  s2=id2;  
	  else
	  {	  
		  s2=identifier_type; //contains the temporary.
		  identifier_type="";
	  }
      int var2=0;
      
      if(symbol_tab.get(class_name).vars.get(id2)!=null)
    	  var2=1;
      if(coming_from_message_send==0 && coming_from_new==0 && coming_from_array_allocation==0 && coming_from_array_lookup==0)
      {
    	  if (var2 ==1)
          {
        	//  System.out.println("check3 " + id +" " +id2);
        	  	int arg1=ir_temp++;
            	  return_temp = return_temp+" ";
                  return_temp = return_temp + "\n BEGIN \n 	HLOAD TEMP "+arg1+" TEMP 0 "+ s2+"\n RETURN TEMP "+arg1+"\n END ";
          }
          else
          {
        	//  System.out.println("check4 " + id +" " +id2);
        	  return_temp = return_temp+" " + s2;
          } 
    	  return (R)return_temp;
     
      }
      else return (R)"";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n) {
      R _ret=null;
      times=1;
      print_in_msg_send = "PLUS ";
      coming_from_array_length=0;
      coming_from_array_lookup=0;
      coming_from_message_send=0;
      String id= (String)n.f0.accept(this);
      String s=new String();
      int var=0;
      if(symbol_tab.get(class_name).vars.get(id)!=null)
    	  var=1;
      String return_temp =new String();
      return_temp = "";
      if(identifier_type.equals(""))
		  s=id;  
	  else
	  {	  
		  s=identifier_type; //contains the temporary.
		  identifier_type="";
	  }
      if(coming_from_array_length==0 && coming_from_array_lookup==0 && coming_from_message_send==0)
      {
    	  if(var==1)
          {
        	  //System.out.println("check1 " + id +" " +id2);
        	  int arg1=ir_temp++;
        	  return_temp=" PLUS ";
              return_temp = return_temp + "\n BEGIN \n 	HLOAD TEMP "+arg1+" TEMP 0 "+ s+"\n RETURN TEMP "+arg1+"\n END ";
             
          }
      
          else if (var ==0)
          {
        	//  System.out.println("check3 " + id +" " +id2);
        	  	return_temp=" PLUS ";
            	  return_temp = return_temp + s;
          }
      
      }
      coming_from_array_length=0;
      coming_from_array_lookup=0;
      coming_from_message_send=0;
      print_in_msg_send="";
      if(return_temp!="")//not got printed
      {
    	  times=1;
          print_in_msg_send = return_temp;
      }
      n.f1.accept(this);
      times=1;
      
      identifier_type="";
      String id2= (String)n.f2.accept(this);
      times=0;
      String s2=new String();
      if(identifier_type.equals(""))
		  s2=id2;  
	  else
	  {	  
		  s2=identifier_type; //contains the temporary.
		  identifier_type="";
	  }
      int var2=0;
      
      if(symbol_tab.get(class_name).vars.get(id2)!=null)
    	  var2=1;
      if(coming_from_message_send==0 && coming_from_new==0 && coming_from_array_allocation==0 && coming_from_array_lookup==0)
      {
    	  if (var2 ==1)
          {
        	//  System.out.println("check3 " + id +" " +id2);
        	  	int arg1=ir_temp++;
                  return_temp = return_temp + "\n BEGIN \n 	HLOAD TEMP "+arg1+" TEMP 0 "+ s2+"\n RETURN TEMP "+arg1+"\n END ";
          }
          else
          {
        	//  System.out.println("check4 " + id +" " +id2);
        	  return_temp = return_temp+" " + s2;
          } 
    	  return (R)return_temp;
     
      }
      else return (R)"";
 
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n) {
      R _ret=null;
      times=1;
      print_in_msg_send = "MINUS ";
      coming_from_array_length=0;
      coming_from_array_lookup=0;
      coming_from_message_send=0;
      String id= (String)n.f0.accept(this);
      String s=new String();
      int var=0;
      if(symbol_tab.get(class_name).vars.get(id)!=null)
    	  var=1;
      String return_temp =new String();
      return_temp = "";
      if(identifier_type.equals(""))
		  s=id;  
	  else
	  {	  
		  s=identifier_type; //contains the temporary.
		  identifier_type="";
	  }
      if(coming_from_array_length==0 && coming_from_array_lookup==0 && coming_from_message_send==0)
      {
    	  if(var==1)
          {
        	  //System.out.println("check1 " + id +" " +id2);
        	  int arg1=ir_temp++;
        	  return_temp=" MINUS ";
              return_temp = return_temp + "\n BEGIN \n 	HLOAD TEMP "+arg1+" TEMP 0 "+ s+"\n RETURN TEMP "+arg1+"\n END ";
             
          }
      
          else if (var ==0)
          {
        	//  System.out.println("check3 " + id +" " +id2);
        	  	int arg1=ir_temp++;
        	  	return_temp=" MINUS ";
            	  return_temp = return_temp + s;
          }
      
      }
      coming_from_array_length=0;
      coming_from_array_lookup=0;
      coming_from_message_send=0;
      print_in_msg_send="";
      if(return_temp!="")//not got printed
      {
    	  times=1;
          print_in_msg_send = return_temp;
      }
      n.f1.accept(this);
      times=1;
      
      identifier_type="";
      String id2= (String)n.f2.accept(this);
      times=0;
      String s2=new String();
      if(identifier_type.equals(""))
		  s2=id2;  
	  else
	  {	  
		  s2=identifier_type; //contains the temporary.
		  identifier_type="";
	  }
      int var2=0;
      
      if(symbol_tab.get(class_name).vars.get(id2)!=null)
    	  var2=1;
      if(coming_from_message_send==0 && coming_from_new==0 && coming_from_array_allocation==0 && coming_from_array_lookup==0)
      {
    	  if (var2 ==1)
          {
        	//  System.out.println("check3 " + id +" " +id2);
        	  	int arg1=ir_temp++;
                  return_temp = return_temp + "\n BEGIN \n 	HLOAD TEMP "+arg1+" TEMP 0 "+ s2+"\n RETURN TEMP "+arg1+"\n END ";
          }
          else
          {
        	//  System.out.println("check4 " + id +" " +id2);
        	  return_temp = return_temp+" " + s2;
          } 
    	  return (R)return_temp;
     
      }
      else return (R)"";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n) {
      R _ret=null;
      times=1;
      print_in_msg_send = "TIMES ";
      coming_from_array_length=0;
      coming_from_array_lookup=0;
      coming_from_message_send=0;
      String id= (String)n.f0.accept(this);
      String s=new String();
      int var=0;
      if(symbol_tab.get(class_name).vars.get(id)!=null)
    	  var=1;
      String return_temp =new String();
      return_temp = "";
      if(identifier_type.equals(""))
		  s=id;  
	  else
	  {	  
		  s=identifier_type; //contains the temporary.
		  identifier_type="";
	  }
      if(coming_from_array_length==0 && coming_from_array_lookup==0 && coming_from_message_send==0)
      {
    	  if(var==1)
          {
        	  //System.out.println("check1 " + id +" " +id2);
        	  int arg1=ir_temp++;
        	  return_temp=" TIMES ";
              return_temp = return_temp + "\n BEGIN \n 	HLOAD TEMP "+arg1+" TEMP 0 "+ s+"\n RETURN TEMP "+arg1+"\n END ";
             
          }
      
          else if (var ==0)
          {
        	//  System.out.println("check3 " + id +" " +id2);
        	  	int arg1=ir_temp++;
        	  	return_temp=" TIMES ";
            	  return_temp = return_temp + s;
          }
      
      }
      coming_from_array_length=0;
      coming_from_array_lookup=0;
      coming_from_message_send=0;
      print_in_msg_send="";
      if(return_temp!="")//not got printed
      {
    	  times=1;
          print_in_msg_send = return_temp;
      }
      n.f1.accept(this);
      times=1;
      
      identifier_type="";
      String id2= (String)n.f2.accept(this);
      times=0;
      String s2=new String();
      if(identifier_type.equals(""))
		  s2=id2;  
	  else
	  {	  
		  s2=identifier_type; //contains the temporary.
		  identifier_type="";
	  }
      int var2=0;
      
      if(symbol_tab.get(class_name).vars.get(id2)!=null)
    	  var2=1;
      if(coming_from_message_send==0 && coming_from_new==0 && coming_from_array_allocation==0 && coming_from_array_lookup==0)
      {
    	  if (var2 ==1)
          {
        	//  System.out.println("check3 " + id +" " +id2);
        	  	int arg1=ir_temp++;
                  return_temp = return_temp + "\n BEGIN \n 	HLOAD TEMP "+arg1+" TEMP 0 "+ s2+"\n RETURN TEMP "+arg1+"\n END ";
          }
          else
          {
        	//  System.out.println("check4 " + id +" " +id2);
        	  return_temp = return_temp+" " + s2;
          } 
    	  return (R)return_temp;
     
      }
      else return (R)"";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n) {
      R _ret=null;
      identifier_type="";
      String id= (String)n.f0.accept(this);
      
      String s=new String();
      if(identifier_type.equals(""))
		  s=id;  
	  else
	  {	  
		  s=identifier_type; //contains the temporary.
		  identifier_type="";
	  }
      
      
      n.f1.accept(this);
      
      
      identifier_type="";
      String id2= (String)n.f2.accept(this);
      
      String s2=new String();
      if(identifier_type.equals(""))
		  s2=id2;  
	  else
	  {	  
		  s2=identifier_type; //contains the temporary.
		  identifier_type="";
	  }
      
      int var=0;
      int param=0;
      int local=0;
      int var1=0;
      int param1=0;
      int local1=0;
      if(meth_name!="")
      {
      if(symbol_tab.get(class_name).methods.get(meth_name).locals.get(id)!=null)
    	  local=1;
      else if(symbol_tab.get(class_name).methods.get(meth_name).params.get(id)!=null)
    	  param=1;
      else if(symbol_tab.get(class_name).vars.get(id)!=null)
    	  var=1;
      if(symbol_tab.get(class_name).methods.get(meth_name).locals.get(id2)!=null)
    	  local1=1;
      else if(symbol_tab.get(class_name).methods.get(meth_name).params.get(id2)!=null)
    	  param1=1;
      else if(symbol_tab.get(class_name).vars.get(id2)!=null)
    	  var1=1;
      }
      int base_addr = ir_temp++;
      int offset = ir_temp++;
      int new_object = ir_temp++;
      if(coming_from_message_send==0  && var==1)//then my array belongs to temp[0] only
      {
      	
      	System.out.println("\n BEGIN");
      	System.out.println("	HLOAD TEMP "+new_object+" PLUS ");
      	System.out.println("\n BEGIN");
      	System.out.println("	HLOAD TEMP "+base_addr +" TEMP "+ " 0 " +s);
      	System.out.println("RETURN TEMP "+base_addr);
      	System.out.println("END");
      	System.out.println("PLUS");
      	System.out.println("BEGIN");
      	int temp=ir_temp++;
    	if(var1==1)
    	{
    		System.out.println("MOVE TEMP "+offset+" TIMES ");
    		System.out.println("BEGIN");
    		System.out.println("	HLOAD TEMP "+temp +" TEMP 0 "+s2);
    		System.out.println("RETURN");
    		System.out.println("TEMP "+temp);
    		System.out.println("END");
    		System.out.println("4");
    		System.out.println("RETURN TEMP "+offset);
	    	System.out.println("END");
	    	System.out.println("4 0");
	    	System.out.println("RETURN TEMP "+new_object);
	    	System.out.println("END");
    		
    	}
    	else //if(local1==1 || param1==1)
    	{
	    	System.out.println("MOVE TEMP "+offset+" TIMES "+s2+" 4");
	    	//System.out.println("MOVE TEMP "+offset+" PLUS TEMP "+offset+" 4");
	    	System.out.println("RETURN TEMP "+offset);
	    	System.out.println("END");
	    	System.out.println("4 0");
	    	System.out.println("RETURN TEMP "+new_object);
	    	System.out.println("END");
        }
      }
      else if(coming_from_message_send==0  && (local==1 || param==1))//then my array belongs to temp[0] only
      {
    	System.out.println("\n BEGIN");
    	System.out.println("	HLOAD TEMP "+new_object+" PLUS ");
    	System.out.println("\n BEGIN");
    	System.out.println("	HLOAD TEMP "+base_addr+s);
    	System.out.println("RETURN TEMP "+base_addr);
    	System.out.println("END");
    	System.out.println("PLUS");
    	System.out.println("BEGIN");
    	int temp=ir_temp++;
    	if(var1==1)
    	{
    		System.out.println("MOVE TEMP "+offset+" TIMES ");
    		System.out.println("BEGIN");
    		System.out.println("	HLOAD TEMP "+temp +" TEMP 0 "+s2);
    		System.out.println("RETURN");
    		System.out.println("TEMP "+temp);
    		System.out.println("END");
    		System.out.println("4");
    		System.out.println("RETURN TEMP "+offset);
	    	System.out.println("END");
	    	System.out.println("4 0");
	    	System.out.println("RETURN TEMP "+new_object);
	    	System.out.println("END");
    		
    	}
    	else //if(local1==1 || param1==1)
    	{
			System.out.println("MOVE TEMP "+offset+" TIMES "+s2+" 4");
			System.out.println("RETURN TEMP "+offset);
			System.out.println("END");
			System.out.println("4 0");
			System.out.println("RETURN TEMP "+new_object);
			System.out.println("END");
        }
    	
    	
      }
            
      coming_from_array_lookup=1;
      n.f3.accept(this);
      return(R) ("TEMP " + new_object);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n) {
      R _ret=null;
      identifier_type="";
      coming_from_message_send=0;
      int var=0;
      int local=0;
      int param=0;
    String id2= (String)n.f0.accept(this);
      
      String s2=new String();
      if(identifier_type.equals(""))
		  s2=id2;  
	  else
	  {	  
		  s2=identifier_type; //contains the temporary.
		  identifier_type="";
	  }
      String array_temp=new String();
      if(symbol_tab.get(class_name).methods.get(meth_name)!=null)
      {
		  if(symbol_tab.get(class_name).methods.get(meth_name).locals.get(id2)!=null) //do move for locals.
		  {
			  local=1;
			  array_temp = ("TEMP " +s2);
		  }
		  else if(symbol_tab.get(class_name).methods.get(meth_name).params.get(id2)!=null) //if it is a param
		  {
			  param=1;
			  array_temp =("TEMP  " +s2);
		  }
		  else if(symbol_tab.get(class_name).vars.get(id2)!=null)//if it is a variable then access through temp0 and offset
		  {
			  int v_table_entry = ir_temp++;
			  array_temp = array_temp+("\n BEGIN");
			  array_temp = array_temp+("\n	HLOAD TEMP "+ v_table_entry+" TEMP 0 "+s2);
			  array_temp = array_temp+("\n RETURN TEMP "+v_table_entry);
			  array_temp = array_temp+("\n END");
			  var=1;
		  }
		  else
			  System.out.println("TEMP  " +s2);
	  }
	  else if(symbol_tab.get(class_name).vars.get(id2)!=null)//if it is a variable then access through temp0 and offset
	  {
		  int v_table_entry = ir_temp++;
		  array_temp = array_temp+("\n BEGIN");
		  array_temp = array_temp+("\n	HLOAD TEMP "+ v_table_entry+" TEMP 0 "+s2);
		  array_temp = array_temp+("\n RETURN TEMP "+v_table_entry);
		  array_temp = array_temp+("\n END");
		  var=1;
	  }
	  else if(s2!=null)
		  array_temp = (s2);
      
      
      int new_object = ir_temp++;
      int v_table= ir_temp++;
    	int v_table_entry= ir_temp++;
       if(coming_from_message_send==0  && var==1)//then my array belongs to temp[0] only
      {
      	
      	System.out.println("\n BEGIN");
      	System.out.println("	HLOAD TEMP "+v_table+" TEMP 0 "+ s2);
      	System.out.println("	HLOAD TEMP "+v_table_entry +" TEMP "+ v_table+" 0 ");
    	int temp = ir_temp++;
    	int actual_size = ir_temp++;
    	System.out.println("	MOVE TEMP "+temp+" TEMP "+v_table_entry);
    	System.out.println("	MOVE TEMP "+actual_size+" 0");
    	int label0=ir_label++;
    	int label1=ir_label++;
    	System.out.println("L"+label0+"	CJUMP LT 0 TEMP "+temp +" L"+label1);
    	System.out.println("	MOVE TEMP "+actual_size+" PLUS TEMP "+actual_size+" 1");
    	System.out.println("	MOVE TEMP "+temp+"	MINUS TEMP "+temp+" 4");
    	System.out.println("JUMP L"+label0);
    	System.out.println("L"+label1+"	NOOP");
      	System.out.println("RETURN");
      	System.out.println("TEMP "+actual_size);
      	System.out.println("END");
      	
        }
      if(coming_from_message_send==0  && local==1)//then my array belongs to temp[0] only
      {
    	System.out.println("\n BEGIN");
    	System.out.println("	HLOAD TEMP "+v_table+ s2);
    	System.out.println("	HLOAD TEMP "+v_table_entry +" TEMP "+ v_table+" 0 ");
    	int temp = ir_temp++;
    	int actual_size = ir_temp++;
    	System.out.println("	MOVE TEMP "+temp+" TEMP "+v_table_entry);
    	System.out.println("	MOVE TEMP "+actual_size+" 0");
    	int label0=ir_label++;
    	int label1=ir_label++;
    	System.out.println("L"+label0+"	CJUMP LT 0 TEMP "+temp +" L"+label1);
    	System.out.println("	MOVE TEMP "+actual_size+"PLUS TEMP "+actual_size+" 1");
    	System.out.println("	MOVE TEMP "+temp+"MINUS TEMP "+temp+" 4");
    	System.out.println("JUMP L"+label0);
    	System.out.println("L"+label1+"	NOOP");
    	System.out.println("RETURN");
    	
    	System.out.println("TEMP "+actual_size);
    	System.out.println("END");
    	
      }
      if(coming_from_message_send==0  && param==1)//then my array belongs to temp[0] only
      {
    	System.out.println("\n BEGIN");
    	System.out.println("	HLOAD TEMP "+v_table+ s2);
    	System.out.println("	HLOAD TEMP "+v_table_entry +" TEMP "+ v_table+" 0 ");
    	int temp = ir_temp++;
    	int actual_size = ir_temp++;
    	System.out.println("	MOVE TEMP "+temp+" TEMP "+v_table_entry);
    	System.out.println("	MOVE TEMP "+actual_size+" 0");
    	int label0=ir_label++;
    	int label1=ir_label++;
    	System.out.println("L"+label0+"	CJUMP LT 0 TEMP "+temp +" L"+label1);
    	System.out.println("	MOVE TEMP "+actual_size+"PLUS TEMP "+actual_size+" 1");
    	System.out.println("	MOVE TEMP "+temp+"MINUS TEMP "+temp+" 4");
    	System.out.println("JUMP L"+label0);
    	System.out.println("L"+label1+"	NOOP");
    	
    	System.out.println("RETURN");
    	System.out.println("	TEMP "+actual_size);
    	System.out.println("END");
      }
      
      n.f1.accept(this);
      n.f2.accept(this);
     // String return_temp = "TEMP "+v_table_entry;
      coming_from_array_length=1;
      return (R)"";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n) {
      R _ret=null;
     
     
      if(times==1)
    	  System.out.println(" " + print_in_msg_send);
      times=0;
      print_in_msg_send = "";
      identifier_type="";
      System.out.println("	CALL ");
      System.out.println("\n BEGIN");
      int new_object = ir_temp++;
      /*if(going_into_nesting==1)
      {
    	  
    	  System.out.println("	MOVE TEMP "+new_object);
      }*/
      String id= (String)n.f0.accept(this);
      int parent_object = ir_temp++;
    
      in_assignment=0;
      
      going_into_nesting=0;
      if(identifier_type!="")
      {
    	  String tokens[] = identifier_type.split(" ");
    	  if(tokens.length!=1)
    	  object_temp = Integer.parseInt(tokens[1]);
      }
      
      int return_object =object_temp;
      int flag=0;
      
      if(coming_from_new==0)
      {
    	  flag=1;
    	  System.out.println("	MOVE TEMP "+new_object+ " TEMP "+ object_temp);
    	  return_object = new_object;
      }
    
      coming_from_new=0;
      
      
      String s=new String();
      if(identifier_type.equals(""))
		  s=id;  
	  else
	  {
		  
		  s=identifier_type;
		  identifier_type="";
	  }
      String class_type = identifier_type1;
      //System.out.println("type is "+type2);
      n.f1.accept(this);
      identifier_type="";
      String id2= (String)n.f2.accept(this);
      String s2=new String();
      if(identifier_type.equals(""))
		  s2=id2;  
	  else
	  {
		  
		  s2=identifier_type;
		  identifier_type="";
	  }
      
      //id contains the specific method name to be called.
      //to find the offset of the function in the vtable.
      int offset=0;
      //System.out.println("class type is "+type2);
      methods = new LinkedHashMap<String, method>();
      methods.putAll(symbol_tab.get(class_type).methods);
      String value = methods.get(s2).return_type;
      String [] tokens = value.split(" ");
      offset = Integer.parseInt(tokens[0]);
      //offset is the offset in the vtable;
      //to get the function name -       
      int v_table_entry = ir_temp++;
      int v_table_meth_entry = ir_temp++;
      if(flag==0)
    	  System.out.println("	HLOAD TEMP "+ v_table_entry+" TEMP "+object_temp+" 0");
      else
    	  System.out.println("	HLOAD TEMP "+ v_table_entry+" TEMP "+new_object+" 0");
      System.out.println("	HLOAD TEMP "+ v_table_meth_entry+" TEMP "+v_table_entry+" "+offset);
      System.out.println("RETURN");
      System.out.println("TEMP "+ v_table_meth_entry);
   
      System.out.println("END");
      
    	  System.out.print("( TEMP "+return_object+" ");
    	  
      n.f3.accept(this);
      if(going_into_nesting==0)
    	  going_into_nesting=1;
      else if(double_nesting==0)
    	  double_nesting=1;
      else
    	  triple_nesting=1;
      n.f4.accept(this);
      if(triple_nesting==1)
    	  triple_nesting=0;
      else if(double_nesting==1)
    	  double_nesting=0;
      else
    	  going_into_nesting=0;
      n.f5.accept(this);
      if(in_assignment==0)
      object_temp = parent_object;
      System.out.println(")");
      coming_from_message_send=1;
      //in_assignment=0;
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n) {
      R _ret=null;
      identifier_type="";
      coming_from_expression_list=1;
      String id2 = (String) n.f0.accept(this);
      String s2 = new String();
      if(identifier_type.equals(""))
		  s2=id2;  
	  else
	  {	  
		  s2=identifier_type;
		  identifier_type="";
	  }
      if(symbol_tab.get(class_name).methods.get(meth_name)!=null)
      {
		  if(symbol_tab.get(class_name).methods.get(meth_name).locals.get(id2)!=null) //do move for locals.
			  System.out.println(" " +s2);
		  else if(symbol_tab.get(class_name).methods.get(meth_name).params.get(id2)!=null) //if it is a param
			  System.out.println(" " +s2);
		  else if(symbol_tab.get(class_name).vars.get(id2)!=null)//if it is a variable then access through temp0 and offset
			  
		  {
			  System.out.println("\n \n BEGIN");
			  int new_load = ir_temp++;
			  System.out.println("	HLOAD TEMP "+new_load+" TEMP 0 "+s2);
			  System.out.println( "RETURN TEMP "+new_load);
			  System.out.println("END");
		  }
		  else if(s2!=null)
			  System.out.println(" " +s2);
	  }
	  else if(symbol_tab.get(class_name).vars.get(id2)!=null)//if it is a variable then access through temp0 and offset
	  {
		  System.out.println("\n \n BEGIN");
		  int new_load = ir_temp++;
		  System.out.println("	HLOAD TEMP "+new_load+" TEMP 0 "+s2);
		  System.out.println( "RETURN TEMP "+new_load);
		  System.out.println("END");
	  }
	  else if(s2!=null)
		  System.out.println(s2);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n) {
      R _ret=null;
      n.f0.accept(this);
      identifier_type="";
      String id2 = (String) n.f1.accept(this);
      String s2 = new String();
      if(identifier_type.equals(""))
		  s2=id2;  
	  else
	  {	  
		  s2=identifier_type;
		  identifier_type="";
	  }
      if(symbol_tab.get(class_name).methods.get(meth_name)!=null)
      {
		  if(symbol_tab.get(class_name).methods.get(meth_name).locals.get(id2)!=null) //do move for locals.
			  System.out.println(" " +s2);
		  else if(symbol_tab.get(class_name).methods.get(meth_name).params.get(id2)!=null) //if it is a param
			  System.out.println(" " +s2);
		  else if(symbol_tab.get(class_name).vars.get(id2)!=null)//if it is a variable then access through temp0 and offset
		  {
			  int v_table_entry = ir_temp++;
			  System.out.println("\n BEGIN");
		      System.out.println("	HLOAD TEMP "+ v_table_entry+" TEMP 0 "+s2);
			  System.out.println("RETURN TEMP "+v_table_entry);
			  System.out.println("END");
		  }
		  else
			  System.out.println(" " +s2);
	  }
	  else if(symbol_tab.get(class_name).vars.get(id2)!=null)//if it is a variable then access through temp0 and offset
	  {
		  int v_table_entry = ir_temp++;
		  System.out.println("\n BEGIN");
	      System.out.println("	HLOAD TEMP "+ v_table_entry+" TEMP 0 "+s2);
		  System.out.println("RETURN TEMP "+v_table_entry);
		  System.out.println("END");
	  }
	  else
		  System.out.println(s2);

      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n) {
      R _ret=null;
      return n.f0.accept(this);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      Integer my_int = Integer.parseInt(n.f0.tokenImage);
      //System.out.println(" "+Integer.toString(my_int));
      coming_from_itf=1;
      return (R)Integer.toString(my_int);
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n) {
      R _ret=null;
      n.f0.accept(this);
     // System.out.println(" 1");
      coming_from_itf=1;
      return (R)"1";
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n) {
      R _ret=null;
      n.f0.accept(this);
     // System.out.println(" 0");
      coming_from_itf=1;
      return (R)"0";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n) {
		 //  System.out.println("fuck");
//			  / System.out.println("rocking");
	 //  System.out.println("fuck me"+symbol_tab.get("BT").methods.get("Start").locals.get("root"));
	   n.f0.accept(this);
	   String id = n.f0.toString();
	  
	   //System.out.println("class is "+id);
	   if(symbol_tab.get(id)!=null)
		   identifier_type1= id;
	   else if(meth_name.equals("")) //it can be there only in the class variables
	   {
		   
		   Class_info_temp = symbol_tab.get(class_name);
		   methods = new LinkedHashMap<String, method>();
		   if(Class_info_temp.methods!=null)
		   methods .putAll( Class_info_temp.methods);
		   vars = new LinkedHashMap<String, String>();
		   vars.putAll(Class_info_temp.vars);
		   String s = vars.get(n.f0.toString());
		   if(s!=null)
		   {
			 //  System.out.println("s is"+ n.f0.toString());
			   String [] tokens = s.split(" ");
			   identifier_type =  "TEMP " + tokens[0];
		   }
	   }
	   else
	   {
		   Class_info_temp = symbol_tab.get(class_name);
		   methods = new LinkedHashMap<String, method>();
		   if(Class_info_temp.methods!=null)
			   methods .putAll( Class_info_temp.methods);
		   vars = new LinkedHashMap<String, String>();
		   vars.putAll(Class_info_temp.vars);
		   params = new LinkedHashMap<String, String>();
		   params .putAll( methods.get(meth_name).params);
		   locals = new LinkedHashMap<String, String>();
		   locals .putAll( methods.get(meth_name).locals);
		   
		  // System.out.println("class : " +class_name +"meth_name : "+meth_name);
		   
		  // System.out.println("check3 "+n.f0.toString());
		   if(params.get(n.f0.toString())!=null)
		   {
			//   System.out.println("check "+n.f0.toString());
			   String s = params.get(n.f0.toString());
			   String [] tokens = s.split(" ");
			   identifier_type =  "TEMP " + tokens[0];
			   if(tokens.length==2)
			   identifier_type1 = tokens[1];
			   else
				   identifier_type1 = tokens[0];
		   }
		   else if(locals.get(n.f0.toString())!=null)
		   {
			  //System.out.println("check2 "+n.f0.toString());
			   String s = locals.get(n.f0.toString());
			   String [] tokens = s.split(" ");
			   identifier_type =  "TEMP " + tokens[0];
			   identifier_type1 = tokens[1];
		   }
		   else if(vars.get(n.f0.toString())!=null)
		   {
			   //System.out.println("checkcheck "+n.f0.toString());
			   String s = vars.get(n.f0.toString());
			   String [] tokens = s.split(" ");
			   identifier_type = tokens[0]; //just the offset for this in TEMP0.
			   identifier_type1 = tokens[1];
		   }
	   }
	//  System.out.println("fuckme" + identifier_type);
	  return (R)n.f0.toString();
   }
 

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n) {
      R _ret=null;
      n.f0.accept(this);
      identifier_type="";
      String return_temp = " TEMP 0";
      identifier_type1=class_name;
      object_temp=0;
      identifier_type = "TEMP 0";
	  return (R)return_temp;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      identifier_type="";
      String id2 = (String)n.f3.accept(this);
      String s2 = new String();
      if(identifier_type.equals(""))
		  s2=id2;  
	  else
	  {	  
		  s2=identifier_type; //contains the temporary.
		  identifier_type="";
	  }
      
      //now after accepting this espression i have to print it
      String size_temp = new String();
      if(symbol_tab.get(class_name).methods.get(meth_name)!=null)
      {
		  if(symbol_tab.get(class_name).methods.get(meth_name).locals.get(id2)!=null) //do move for locals.
			  size_temp = (s2);
		  else if(symbol_tab.get(class_name).methods.get(meth_name).params.get(id2)!=null) //if it is a param
			  size_temp =(s2);
		  else if(symbol_tab.get(class_name).vars.get(id2)!=null)//if it is a variable then access through temp0 and offset
		  {
			  int v_table_entry = ir_temp++;
			  size_temp = size_temp+("\n BEGIN");
			  size_temp = size_temp+("\n	HLOAD TEMP "+ v_table_entry+" TEMP 0 "+s2);
			  size_temp = size_temp+("\n RETURN TEMP "+v_table_entry);
			  size_temp = size_temp+("\n END");
		  }
		  else
			  System.out.println("TEMP  " +s2);
	  }
	  else if(symbol_tab.get(class_name).vars.get(id2)!=null)//if it is a variable then access through temp0 and offset
	  {
		  int v_table_entry = ir_temp++;
		  size_temp = size_temp+("\n BEGIN");
		  size_temp = size_temp+("\n	HLOAD TEMP "+ v_table_entry+" TEMP 0 "+s2);
		  size_temp = size_temp+("\n RETURN TEMP "+v_table_entry);
		  size_temp = size_temp+("\n END");
	  }
	  else if(s2!=null)
		  size_temp = (s2);
      
      System.out.println("\n BEGIN");
      int new_object = ir_temp++;
      System.out.println("	MOVE TEMP "+new_object+" HALLOCATE TIMES PLUS "+ size_temp+" 1 " + "4");
      int incrementor = ir_temp++;
      System.out.println("	MOVE TEMP "+incrementor+" 4");
      int label_for_store = ir_label++;
      int label_for_size_store = ir_label++;
      System.out.println("\n L"+label_for_store+"	CJUMP LT TEMP "+incrementor+" TIMES PLUS "+ size_temp+" 1 " + "4"+ " L"+label_for_size_store);
      System.out.println("	HSTORE PLUS TEMP "+new_object+" TEMP "+incrementor+" 0 "+"0");
      System.out.println("	MOVE TEMP "+incrementor+"	PLUS TEMP "+ incrementor+" 4");
      System.out.println("JUMP L"+label_for_store);
      System.out.println("L"+label_for_size_store+"	HSTORE TEMP "+new_object+" 0 "+" TIMES "+size_temp+" 4 ");
      System.out.println("RETURN");
      System.out.println("TEMP "+new_object);
      System.out.println("END");
      
      
      n.f4.accept(this);
      coming_from_array_allocation=1;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n) {
      R _ret=null;
      identifier_type="";
      
      check_if_coming_from_new_or_not=1;
      //class_type_or_not=1;
      n.f0.accept(this);
      String id = (String)n.f1.accept(this);
      String type_called = new String();
   
      type_called = identifier_type1;
      if(in_assignment==0)
      {
    	  int new_obj=ir_temp++;
    	  System.out.println("	MOVE TEMP "+new_obj);
    	  object_temp= new_obj;
      }
      System.out.println("\n \n BEGIN ");
   
      in_assignment=0;
     // String type_called = (String)n.f1.accept(this); //directly gives me the type.
      int no_of_functions = symbol_tab.get(type_called).methods.size();
      int no_of_vars = symbol_tab.get(type_called).vars.size();
      methods =  symbol_tab.get(type_called).methods;
      v_table_temp = ir_temp++;
      int object_temp1 = ir_temp++;
      System.out.println("	MOVE " + "TEMP " + v_table_temp +" HALLOCATE " + 4*no_of_functions);
      System.out.println("	MOVE " + "TEMP " + object_temp1 +" HALLOCATE " + 4*(no_of_vars+1));
      int offset=0;
      for (Map.Entry<String, method> entry : methods.entrySet()) 
      {
    	    String key = entry.getKey();
    	    System.out.println("	HSTORE TEMP "+ v_table_temp+" "+offset+" "+type_called+"_"+key);
    	    offset=offset+4;
      }
      //adding all these into the object -
      if(no_of_vars!=0)
      {
      int incrementing_temp = ir_temp++;
      System.out.println("	MOVE TEMP "+ incrementing_temp+ " 4");
      
	      int label1 = ir_label++;
	      int label2=ir_label++;
	      System.out.println("L"+label1+"	"+"CJUMP LT TEMP "+incrementing_temp+" " + 4*(no_of_vars+1) + " L"+label2);
	      System.out.println("	HSTORE PLUS TEMP "+ object_temp1+" TEMP "+incrementing_temp + " 0 0 ");
	  	  System.out.println("	MOVE TEMP "+ incrementing_temp+" PLUS TEMP "+incrementing_temp+" 4");
	      System.out.println("	JUMP L"+label1);
	  
	      System.out.println("L"+label2+"	HSTORE TEMP "+ object_temp1+" 0 TEMP "+v_table_temp);
      }
      else
      {
    	  System.out.println("	HSTORE TEMP "+ object_temp1+" 0 TEMP "+v_table_temp);
      }
      System.out.println("RETURN");
      System.out.println("TEMP "+object_temp1);
      System.out.println("END");
      n.f2.accept(this);
      n.f3.accept(this);
     // System.out.println("type called is"+identifier_type);
      coming_from_new=1;
      return (R)type_called;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n) { //this things returns "MINUS 1 s"
      R _ret=null;
      n.f0.accept(this);
      
      identifier_type=""; //identifier type contains the temporary.
      if(times==1)
    	  System.out.println(" " + print_in_msg_send);
      times=1;
      print_in_msg_send = " MINUS 1 ";
      String id= (String)n.f1.accept(this);
      times=0;
      String s=new String();
      if(identifier_type.equals(""))
		  s=id;  
	  else
	  {	  
		  s=identifier_type; //contains the temporary.
		  identifier_type="";
	  }
      String return_temp = new String();
      if(coming_from_message_send==0 && coming_from_new==0 && coming_from_array_allocation==0 && coming_from_array_lookup==0)
      {
    	  if(symbol_tab.get(class_name).vars.get(id)!=null)
      {
    	  int new_object=ir_temp++;
    	  return_temp = "MINUS 1 ";
    	  System.out.println("\n BEGIN");
	      System.out.println("	HLOAD TEMP "+ new_object+" TEMP 0 "+s);
		  System.out.println("RETURN TEMP "+new_object);
		  System.out.println("END");
      }
      else return_temp = "MINUS 1" +" "+ s;
      }
      coming_from_not=1;
      if(coming_from_message_send==0 && coming_from_new==0 && coming_from_array_allocation==0 && coming_from_array_lookup==0)
    	  return (R)return_temp;
      
      else return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n) {
      R _ret=null;
      n.f0.accept(this);
      identifier_type="";
      String id= (String)n.f1.accept(this);
      String s=new String();
      /*if(identifier_type.equals(""))
		  s=id;  
	  else
	  {	  
		  s=identifier_type; //contains the temporary.
		  identifier_type="";
	  } */
      //System.out.println("bracket");
 	 //System.out.println("in bracketed "+s);
 	 n.f2.accept(this);
 	 return (R)id; //replacing types by temporaries this thing returns temporary.
   }

}