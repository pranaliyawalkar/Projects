//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class P4_visitor<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	
	int new_temp=1000;
	int simple_exp=0;
	int coming_from_procedure=0;
	int coming_from_stmt_list=0;
	int coming_from_param=0;
	String params = new String();
	String current_temp = new String();
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         params = ""; 
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            params = params + (String)e.nextElement().accept(this) +" ";
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
      {
    	  System.out.println(n.node.accept(this)+"\n NOOP");
         return n.node.accept(this);
      }
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      System.out.println("MAIN ");
      String s1 = (String)n.f1.accept(this);
      System.out.println(" "+"END");
      n.f2.accept(this);
      String s3 = (String)n.f3.accept(this); //todo.
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
      coming_from_stmt_list=1;
     String s = (String) n.f0.accept(this);
    // String new1 = (String) n.f0.elementAt(0).toString();
//     System.out.println("check"+new1);
    
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n) {
      R _ret=null;
      coming_from_stmt_list=0;
      coming_from_procedure=1;
      String s0 = (String)n.f0.accept(this);
    coming_from_stmt_list=0;  
      n.f1.accept(this);
      String s2 = (String)n.f2.accept(this);
      System.out.println(" [ "+s2+" ] ");
      System.out.println("BEGIN");
      n.f3.accept(this);
      String s4 = (String)n.f4.accept(this);
      System.out.println("RETURN "+s4);
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      String s =(String) n.f0.accept(this);
      System.out.println(s);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      return (R)"NOOP";
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      n.f0.accept(this);
      return (R)"ERROR";
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String s1 =(String) n.f1.accept(this);
      String s2 =(String)n.f2.accept(this);
      String s = ("CJUMP "+s1+" "+s2);
      return (R)s;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String s1 = (String)n.f1.accept(this);
      String s =("JUMP "+s1);
      return (R)s;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      //System.out.print("HSTORE ");
      simple_exp=0;
      String s = new String();
      s=" ";
      int flag1=0;
      int flag3=0;
      String s1 = (String)n.f1.accept(this);
    	if(simple_exp==0)
    		flag1=1;
    	/*else 
    	{
    		int temp =new_temp++;
    		s=s+"MOVE TEMP "+temp+" "+s1;
    	}*/
      simple_exp=0;
      String s2 = (String)n.f2.accept(this);
	  	/*else 
	  	{
	  		int temp =new_temp++;
	  		s=s+"MOVE TEMP "+temp+" "+s2;
	  	}*/
      simple_exp=0;
      String s3 = (String)n.f3.accept(this);
      if(simple_exp==0)
  		flag3=1;
  		/*else 
  		{
  			int temp =new_temp++;
  			s=s+"MOVE TEMP "+temp+" "+s1;
  		}*/
      if(flag1==1 && flag3==0)
      {
    	  int temp =new_temp++;
  			s=s+"MOVE TEMP "+temp+" "+s1;
  			s=s+"\n HSTORE TEMP "+temp+ " "+s2+" "+s3;
      }
      else if(flag3==1 && flag1==0)
      {
    	  int temp =new_temp++;
    	  s=s+"MOVE TEMP "+temp+" "+s3;
    	  s=s+"\n HSTORE "+s1+ " "+s2+" TEMP "+temp;
      }
      else if(flag1==0 &&  flag3==0)
      {
    	  s="\n HSTORE "+s1+" "+s2+" "+s3;
      }
      else
      {
    	  int temp1 =new_temp++;
    	  int temp3 =new_temp++;
    	  s=s+"\n MOVE TEMP "+temp1+" "+s1;
    	  s=s+"\n MOVE TEMP "+temp3+" "+s3;
    	  s=s+"\n HSTORE TEMP "+temp1+ " "+s2+" TEMP "+temp3;  
      }
    	  simple_exp=0;
      return (R)s;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      String s0 = (String)n.f0.accept(this);
      String s1 = (String)n.f1.accept(this);
      String s = new String();
      simple_exp=0;
      simple_exp=0;
      String s2 = (String)n.f2.accept(this);
      simple_exp=0;
      String s3 = (String)n.f3.accept(this);
      s=("HLOAD "+s1+" "+s2+" "+s3);
      return (R)s;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
      simple_exp=0;
   //   System.out.print("MOVE ");
      String s0 = (String)n.f0.accept(this);
      String s1 = (String)n.f1.accept(this);
      String s = new String();
      s=("MOVE "+s1+" ");
      simple_exp=0;
      String s2 = (String)n.f2.accept(this);
      s=s+(s2+" ");
      return (R)s;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n) {
      R _ret=null;
      n.f0.accept(this);
      simple_exp=0;
      String s1 = (String) n.f1.accept(this);
      int temp = new_temp++;
      String s = ("MOVE TEMP "+temp+" "+s1);
      s=s+(" \n PRINT TEMP "+temp);
      return (R)s;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(Exp n) {
      R _ret=null;
      String s = (String)  n.f0.accept(this);
     // if(coming_from_param==1)
      {
    	// System.out.println("check "+s);
    	 // return _ret;
      }
      return (R)s;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n) {
      R _ret=null;
      n.f0.accept(this);
     // System.out.println("BEGIN");
      n.f1.accept(this);
     n.f2.accept(this);
    	
     String s = (String)   n.f3.accept(this);
     current_temp =s;
      n.f4.accept(this);
      //System.out.println("END");
      return (R)s;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n) {
      R _ret=null;
     // System.out.println("checking1");
      n.f0.accept(this);
      simple_exp=0;
      String s1 = (String)n.f1.accept(this);
      simple_exp=0;
      n.f2.accept(this);
      coming_from_param=1;
      //System.out.println(s1);
      String s3 = (String)n.f3.accept(this);
      int temp = new_temp++;
      
      String [] tokens = params.split(" ");

      
      //System.out.println("checking "+params);
      
      int i=0;
      while(i<tokens.length)
      {
	      if(!tokens[i].equals("TEMP"))
	      {
	    	  int temp1 = new_temp++;
	    	  System.out.println("MOVE TEMP "+temp1+" "+tokens[i] +" ");
	    	  tokens[i]="TEMP "+temp1;
	    	  i++;
	      }
	      else
	      i=i+2;
      }
      params = "";
      for(i=0;i<tokens.length;i++)
    	  params = params+tokens[i]+" "; 
      
      
      System.out.println("MOVE TEMP "+temp+" CALL "+s1+ " ( "+params+" ) ");
      n.f4.accept(this);
      coming_from_param=0;
      return (R)("TEMP "+temp);
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      n.f0.accept(this);
      simple_exp=0;
      String s1 = (String)n.f1.accept(this);
      String s=("HALLOCATE " + s1);
      return (R)s;
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n) {
      R _ret=null;
      String s0 = (String)n.f0.accept(this);
      simple_exp=0;
      String s1 = (String)n.f1.accept(this);
      simple_exp=0;
      String s2 = (String)n.f2.accept(this);
      int temp = new_temp++;
      System.out.println("MOVE TEMP "+temp + " "+s0+" "+s1+" "+s2);
      return (R)("TEMP "+temp);
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n) {
      R _ret=null;
      int which = n.f0.which;
      String s = " ";
      switch (which)
      {
      case 0 : {s="LT"; break;}
      case 1 : {s= "PLUS"; break;}
      case 2 : {s= "MINUS";break;}
      case 3 : {s= "TIMES"; break;}
      }
    	 return (R)s;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n) {
	  simple_exp=1;
      R _ret=null;
      n.f0.accept(this);
      String s1 = (String)n.f1.accept(this);
      String s = "TEMP "+s1;
      //System.out.println("checktemp "+s);
      return (R)s;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
	   simple_exp=1;
      R _ret=null;
      Integer my_int = Integer.parseInt(n.f0.tokenImage);
      int temp=new_temp++;
      //String s = "MOVE TEMP "+temp+
      return (R)Integer.toString(my_int);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=null;
     String s = n.f0.toString();
     //System.out.println("check "+s);
     if(coming_from_procedure==1)
     {
    	 coming_from_procedure=0;
    	 System.out.println(s+" ");
     }
      return (R)s;
   }

}
