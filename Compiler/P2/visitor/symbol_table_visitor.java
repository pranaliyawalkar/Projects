//
// Generated by JTB 1.3.2
//


package visitor;
import syntaxtree.*;

import java.text.ParseException;
import java.util.*;

import javax.lang.model.type.NullType;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

public class symbol_table_visitor<R> implements GJNoArguVisitor<R> {
   
	// TA CODE:
	int flag; //for symbol table generation.
	Stack<String> stack = new Stack<String>(); ///a stack of class and methods
	Stack<String> stack2 = new Stack<String>();
	Stack<String> stack3 = new Stack<String>();
	int param_count = 0; //for counting the number of parameters matched in the expressionlist.
	private String class_name = new String ();
	private String object_called =  new String();
	private String method_called = new String();
	private String current_object_called =  new String();
	private String current_method_called = new String();
	private String identifier_type = new String();
	private String expression_type = new String();
	private String caller_type = new String();
	private int in_this =0;
	private int in_bracketed=0;
	private int in_identifier_else=0;
	private String prev_identifier_type = new String();
	private int in_message_send =0;
	private String class_name_of_extended_class  = new String ();
	private String meth_name  = new String ();
	int check_if_coming_from_new_or_not = 0;
	int class_type_or_not=0;
	int in_new=0;
	private Class_info Class_info_temp = new Class_info();
	private LinkedHashMap<String,String> vars=new LinkedHashMap<String,String>();
	private LinkedHashMap<String,Vector<String> > dependent_class=new LinkedHashMap<String,Vector<String>>();
	private method Method = new method();
	private Class_info new_class = new Class_info();
	private LinkedHashMap<String,method> methods=new LinkedHashMap<String,method>();
	private LinkedHashMap<String,String> params=new LinkedHashMap<String,String>();
	private LinkedHashMap<String,String> params1=new LinkedHashMap<String,String>();
	private LinkedHashMap<String,String> parents=new LinkedHashMap<String,String>();
	private LinkedHashMap<String,String> locals=new LinkedHashMap<String,String>();
	 LinkedHashMap<String,Class_info> symbol_tab=new LinkedHashMap<String,Class_info>();

	 
//
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n) {
	 
	  flag=0;
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
     
      flag=1;
      object_called = "";
    	method_called="";
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      
      //BEGINNING MY SECOND PARSE.
      System.out.println("Program parsed successfully");
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      class_name=n.f1.f0.toString();
      meth_name="main";
      if(flag==0)
      {
         
    	  Class_info new_class_1 = new Class_info();
    	  symbol_tab.put(class_name,new_class_1);
      }
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      if(flag==0)
      {
    	  method Method1 = new method();
    	  Method1.return_type="void";
    	  symbol_tab.get(class_name).methods.put(meth_name,Method1);
    	 // System.out.println("class : " +class_name);
    	  //System.out.println("method : " +"void  "+meth_name);
      }
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      if(flag==1)
    	  n.f11.accept(this);
      if(flag==0)
      { 
    	 String id = (String)n.f11.accept(this);
    	 Class_info_temp = symbol_tab.get(class_name);
    	 methods = new LinkedHashMap<String, method>();
    	 methods .putAll( Class_info_temp.methods);
    	 params = new LinkedHashMap<String, String>();
    	 params .putAll( methods.get("main").params);
    	 params.put(id, "String[]");
    	 methods.get("main").params=params;
    	 Class_info_temp.methods .putAll( methods);
    	 symbol_tab.put(class_name,Class_info_temp);
    	// System.out.println("params : " +"String[]  "+ id);
      }
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      Vector<String> list_temp1 = new Vector <String>();
      class_name=n.f1.f0.toString();
      meth_name="";
      if(flag==0)
      {
    	
      	 // System.out.println("class : "+class_name);
      	  
    	  if(symbol_tab.get(class_name)!=null)
    	  {System.out.println("Type error");
		  System.exit(0);
		  }
    	  Class_info new_class_1 = new Class_info();
      	  symbol_tab.put(class_name,new_class_1);
      }
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
	  if(flag==0)
	  {
		  
		  Enumeration dependee = list_temp1.elements();
		  while(dependee.hasMoreElements())
		  {
			  String new_dependee = (String)dependee.nextElement();
			  vars = new LinkedHashMap<String, String>();
			  vars .putAll( symbol_tab.get(new_dependee).vars);
			  methods = new LinkedHashMap<String, method>();
			  methods.putAll (symbol_tab.get(new_dependee).methods);
			  symbol_tab.get(new_dependee).vars .putAll( symbol_tab.get(class_name).vars);
			  symbol_tab.get(new_dependee).methods .putAll( symbol_tab.get(class_name).methods);
			  symbol_tab.get(new_dependee).vars.putAll(vars); 
			  symbol_tab.get(new_dependee).methods.putAll(methods); 
		  }
	  }	
      n.f5.accept(this);
      //TA CODE:

      		
    	  /* Note that type of VarDeclaration(i.e. f3 here) in class ClassDeclaration(see file syntaxtree/ClassDeclaration.java)
    	   * is NodeListOptional. And in class NodeListOptional(see file syntaxtree/NodeListOptional) method 'present' returns
    	   * true if there is any node, otherwise false. 
    	   *  
    	   */
//ME -WHENEVER I SEE A NEW CLASS I SHOULD EMPTY ALL MY LinkedHashMapS.

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n) {
      R _ret=null;  
      //ME -WHENEVER I SEE A NEW CLASS I SHOULD EMPTY ALL MY LinkedHashMapS.

      Vector<String>list_temp1 = new Vector<String>();
      n.f0.accept(this);
      n.f1.accept(this);
  	  
      meth_name="";
  	  class_name=n.f1.f0.toString();
      if(flag==0)
      {
    	  
          list_temp1 = dependent_class.get(class_name); 
      	  //System.out.println("class : " + class_name ); 
    	  if(symbol_tab.get(class_name)!=null)
    	  {System.out.println("Type error");
		  System.exit(0);
		  }  //ME - THROW AN EXCEPTION
    	  Class_info new_class_1 = new Class_info();
    	  symbol_tab.put(class_name,new_class_1);
  
      }
      n.f2.accept(this);
      n.f3.accept(this);
      if(flag==0)
      {
	      class_name_of_extended_class = n.f3.f0.toString();
	      //System.out.println("extended class : " +class_name_of_extended_class);
	      if(symbol_tab.get(class_name_of_extended_class)!=null)
	      {
		    //ME - ADDING THE ALREADY EXISTING CLASS KA LinkedHashMapS TO THE ONE WHICH EXTENDS THIS.
	    	  //System.out.println("fuck me more");
	    	  vars = new LinkedHashMap<String, String>();
		      vars .putAll( symbol_tab.get(class_name_of_extended_class).vars);
		      methods = new LinkedHashMap<String, method>();
		      methods .putAll(symbol_tab.get(class_name_of_extended_class).methods);
		      Class_info_temp=symbol_tab.get(class_name);
		      Class_info_temp.vars.putAll(vars);
		      Class_info_temp.methods.putAll(methods);
		      parents.put(class_name, class_name_of_extended_class);
		      symbol_tab.put(class_name,Class_info_temp);
		   /*   if(symbol_tab.get("Yawalkar")!=null)
		    		if(symbol_tab.get("Yawalkar").methods!=null)
		    			if(symbol_tab.get("Yawalkar").methods.get("Comp").params!=null)
		    	System.out.println(	symbol_tab.get("Yawalkar").methods.get("Comp").params.size());*/
	      }
	      else
	      {
	    	  Vector<String> list_temp = new Vector<String>();
	    	  if(dependent_class.get(class_name_of_extended_class) !=null)
	    	  {
	    		  list_temp = dependent_class.get(class_name_of_extended_class) ;
	    	  }
	    	  list_temp.add(class_name);
	    	dependent_class.put(class_name_of_extended_class, list_temp);  
	      }
      }
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      
    	  if(flag==0)
    	  {
    		  if(list_temp1!=null)
    		  {
    		  Enumeration dependee = list_temp1.elements();
    		  while(dependee.hasMoreElements())
    		  {
    			  String new_dependee = (String)dependee.nextElement();
    			  vars = new LinkedHashMap<String, String>();
    			  vars .putAll(symbol_tab.get(new_dependee).vars);
    			  methods = new LinkedHashMap<String, method>();
    			  methods.putAll( symbol_tab.get(new_dependee).methods);
    			  symbol_tab.get(new_dependee).vars.putAll(symbol_tab.get(class_name).vars);
    			  symbol_tab.get(new_dependee).methods .putAll( symbol_tab.get(class_name).methods);
    			  symbol_tab.get(new_dependee).vars.putAll(vars); 
    			  symbol_tab.get(new_dependee).methods.putAll(methods); 
    		  }
    		  }
    	  }	  
      
      n.f7.accept(this);
      //TA CODE:
  
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n) {
      R _ret=null;
      String type = new String();
      if(flag==0)
    	  type=(String)n.f0.accept(this);
      else
    	  n.f0.accept(this);
     
     String id = (String) n.f1.accept(this);
      //TA CODE:
      if(flag==0)
      {
	      if(meth_name.equals(""))
	      {
	    	  //ME - APPENDING THE VARIABLE AND ITS TYPE TO THE VARS LIST OF THE CLASS.
	    	  Class_info_temp=symbol_tab.get(class_name);
	    	  methods = new LinkedHashMap<String, method>();
	    	  methods.putAll( Class_info_temp.methods);
	    	  vars = new LinkedHashMap<String, String>();
	      	  vars.putAll(Class_info_temp.vars);
	      	  if(vars.get(n.f1.f0.toString())!=null)
	      	  {System.out.println("Type error");
			  System.exit(0);
			  }
	      	  vars.put(id,type);
	      	  Class_info_temp.vars.putAll(vars);
	      	  Class_info_temp.methods.putAll(methods);
	      	  symbol_tab.put(class_name,Class_info_temp);
	      	 // System.out.println("vars : " + type + " " + id);
	      }
	      else
	      {
	    	  //ME - ELSE I HAVE TO PUT IT IN THE CURRENT METHOD NAME OF THE CLASS NAME;
	    	  Class_info_temp=symbol_tab.get(class_name);
	    	  methods = new LinkedHashMap<String, method>();
	    	  methods.putAll( Class_info_temp.methods);
	    	  vars = new LinkedHashMap<String, String>();
	      	  vars.putAll(Class_info_temp.vars);
	      	params = new LinkedHashMap<String, String>();
	      	  params.putAll(methods.get(meth_name) .params);
	      	locals = new LinkedHashMap<String, String>();
	      	  locals.putAll(methods.get(meth_name) .locals);
	      	 // if(locals.get(n.f1.f0.toString())!=null)
	      		//  System.out.println("error26");
	      	  locals.put(n.f1.f0.toString(),type);
	      	  methods.get(meth_name) .locals = locals;
	      	  Class_info_temp.methods.putAll(methods);
	      	  symbol_tab.put(class_name,Class_info_temp);
	      	//System.out.println("locals : " + type + " " + n.f1.f0.toString());
	      } 
      }
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      int flag3=0;
      String return_type  = new String();
      if(flag==0)
    	  return_type = (String)n.f1.accept(this);
      else
    	  n.f1.accept(this);
      n.f2.accept(this);
      meth_name=n.f2.f0.toString();
      //System.out.println(meth_name+class_name);
      if(flag==0)
      {
    	  //not allowing method re declaration if not in parent also.
    	  if(symbol_tab.get(class_name).methods.get(meth_name)!=null && symbol_tab.get(parents.get(class_name)).methods.get(meth_name)==null)
    	  {System.out.println("Type error");
		  System.exit(0);
		  }
    	  //over riding - 
    	  else if (symbol_tab.get(class_name).methods.get(meth_name)!=null && symbol_tab.get(parents.get(class_name)).methods.get(meth_name)!=null)
    	  {
    		 // System.out.println("yesyesyes");
    		  flag3=1;
    	  }
    		  
          Class_info_temp =  symbol_tab.get(class_name);
          methods = new LinkedHashMap<String, method>();
		  methods.putAll( Class_info_temp.methods);
		  method Method1= new method();
		  Method1.return_type=return_type;

		  //System.out.println("checking here");
		 /* if(symbol_tab.get("Yawalkar")!=null)
	    		if(symbol_tab.get("Yawalkar").methods!=null)
	    			if(symbol_tab.get("Yawalkar").methods.get("Comp")!=null)
	    				if(symbol_tab.get("Yawalkar").methods.get("Comp").params!=null)
	    	System.out.println(	symbol_tab.get("Yawalkar").methods.get("Comp").params.size());
		  */
		  
	  	  methods.put(meth_name,Method1);
	  	  Class_info_temp.methods.putAll(methods);
	  	  symbol_tab.put(class_name,Class_info_temp);
	  	  
	  	  
	  	  
	  	// System.out.println("checking here1");
		/*  if(symbol_tab.get("Yawalkar")!=null)
	    		if(symbol_tab.get("Yawalkar").methods!=null)
	    			if(symbol_tab.get("Yawalkar").methods.get("Comp")!=null)
	    				if(symbol_tab.get("Yawalkar").methods.get("Comp").params!=null)
	    	System.out.println(	symbol_tab.get("Yawalkar").methods.get("Comp").params.size());
	  	  */
	  	  
	  	  
	  	//System.out.println("method : " + return_type + " " + meth_name);
	  	//if(class_name.equals("Pranali") && symbol_tab.get("Pranali").methods.get("Comp")!=null)
	  		//System.out.println("love");
      }
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      if(flag3==1)
      {
    	  flag3=0;
    	  params = new LinkedHashMap<String, String>();
    	  params .putAll( symbol_tab.get(class_name).methods.get(meth_name).params);
    	  params1 = new LinkedHashMap<String, String>();
    	  params1.putAll( symbol_tab.get(parents.get(class_name)).methods.get(meth_name).params);
    	  int i=0;
    	  int i1=0;
    	  int params_count=0;
    	  String return_type1 = symbol_tab.get(parents.get(class_name)).methods.get(meth_name).return_type;
    	  if(return_type1.equals(return_type) && params.size()==params1.size())
    	  {
    		  //System.out.println("could be return type and return type 1 are :  " +return_type+" " + return_type1);
    		  //System.out.println("size is " +params.size()+" "+params1.size());
    		 /* if(symbol_tab.get("Yawalkar").methods.get("Comp").params!=null)
    			  if(symbol_tab.get("Yawalkar")!=null)
    		    		if(symbol_tab.get("Yawalkar").methods!=null)
    		    			if(symbol_tab.get("Yawalkar").methods.get("Comp").params!=null)
    		    	System.out.println(	symbol_tab.get("Yawalkar").methods.get("Comp").params.size());
    		  */while(params_count <= params.size())
    		  {
    			  params_count++;
    			  i=1;
    			  i1=1;
    			  String param_temp = new String();
    			  String param_temp1 = new String();
    			  for( String param : params.values())
    			  {
    				  if(i==params_count)
    				  {
    					 param_temp = param;
    					 break;
    				  }
    				  else i++;
    			  }
    			  for( String param1 : params1.values())
    			  {
    				  if(i1==params_count)
    				  {
    					 param_temp1 = param1;
    					 break;
    				  }
    				  else i1++;
    			  }
    			  if(!param_temp.equals(param_temp1))
    			  {
    				  {System.out.println("Type error");
    	    		  System.exit(0);
    	    		  }
    				  break;
    			  }
    		  }
    	  }
    	  else 
    		  {System.out.println("Type error");
    		  System.exit(0);
    		  }

      }
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
        return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n) {
      R _ret=null;     
      n.f0.accept(this);      
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n) {
      R _ret=null;
      String type = new String();
      if(flag==0)
      {
    	  type = (String)n.f0.accept(this);
      }
      else
      {
    	  n.f0.accept(this);
    	  n.f1.accept(this);
      }
     // n.f1.accept(this);
      //ME - ELSE I HAVE TO PUT IT IN THE CURRENT METHOD NAME OF THE CLASS NAME;
      if(flag==0)
      {
    	  String id = new String();
    	  id = (String)n.f1.accept(this);
    	//  System.out.println("my id is "+id);
    	  Class_info_temp=symbol_tab.get(class_name);
    	 // System.out.println("in formal param  "+meth_name+type);
    	  methods = new LinkedHashMap<String, method>();
	      methods .putAll( Class_info_temp.methods);
	      params = new LinkedHashMap<String, String>();
	      params.putAll(methods.get(meth_name).params);
	      locals = new LinkedHashMap<String, String>();
	      locals.putAll(methods.get(meth_name).locals);
	      if(params.get(id)!=null)
	      {System.out.println("Type error");
		  System.exit(0);
		  }
	      params.put(id, type);
	   	  methods.get(meth_name) .params = params;
	   	  Class_info_temp.methods=methods;
	   	  symbol_tab.put(class_name,Class_info_temp);
	   	 // System.out.println("params : " + type + " " + id);
/*	    	if(symbol_tab.get("Yawalkar")!=null)
	    		if(symbol_tab.get("Yawalkar").methods!=null)
	    			if(symbol_tab.get("Yawalkar").methods.get("Comp").params!=null)
	    	System.out.println(	symbol_tab.get("Yawalkar").methods.get("Comp").params.size());*/
		  		//System.out.println("love1");
	   	  //if(symbol_tab.get("Fac").methods.get("ComputeFac").params.get("num")!=null)
	   		  //System.out.println("kill me" + symbol_tab.get("Fac").methods.get("ComputeFac").params.get("num"));
      }
   	  return _ret;
   }
   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n) {
      // TA CODE:
      return n.f0.accept(this);
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n) {
      //TA CODE:
	      n.f0.accept(this);
	      n.f1.accept(this);
	      n.f2.accept(this);
	   return (R)"int[]";
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n) {
	      //TA CODE:
	      n.f0.accept(this);
		   return (R)"boolean";
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n) {
	      //TA CODE:
	      n.f0.accept(this);
		   return (R)"int";
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n) {
      R _ret=null;
      identifier_type="";
      String type1= new String();
      String type2= new String();
      if(flag==0)
    	  n.f0.accept(this);
      else
      {
    	  String id= (String)n.f0.accept(this);
    	//  System.out.println("fuckmetoo" + identifier_type);
    	  if(identifier_type.equals(""))
    		  type1=id;  
    	  else
    	  {
    		  
    		  type1=identifier_type;
    		  identifier_type="";
    	  }
      }
      n.f1.accept(this);
      if(flag==0)
    	  n.f2.accept(this);
      else
      {
    	  identifier_type="";
    	  String id= (String)n.f2.accept(this);
    	  if(identifier_type.equals(""))
    		  type2=id;  
    	  else
    	  {
    		  type2=identifier_type;
    		  identifier_type="";
    	  }
    	  
    	  String parent_type = parents.get(type2);
    	 // System.out.println("parent : " + parent_type);
    	  if(!type2.equals(type1) && !parents.get(type2).equals(type1))
    	  {
    		 // System.out.println("type1 : " +type1 + "  type2 : " + type2);
    		  //System.out.println("current class : " + class_name + " current method : "+ meth_name);
    		  {System.out.println("Type error");
    		  System.exit(0);
    		  }
    	  }
    	  
      }
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n) {
      R _ret=null;
      String type1 = new String ();
      String type2 = new String();
      String type3= new String();
      if(flag==0)
    	  n.f0.accept(this);
      if(flag==1)
      {
    	  identifier_type="";
    	  String id= (String)n.f0.accept(this);
    	  if(identifier_type.equals(""))
    		  type1=id;  
    	  else
    	  {
    		  type1=identifier_type;
    		  identifier_type="";
    	  }
    	  if(!type1.equals("int[]"))
    	  {
    		  {System.out.println("Type error");
    		  System.exit(0);
    		  }
    	  }
    	  
      }
      n.f1.accept(this);
      if(flag==0)
      n.f2.accept(this);
      if(flag==1)
      {
    	  identifier_type="";
    	  String id= (String)n.f2.accept(this);
    	  if(identifier_type.equals(""))
    		  type2=id;  
    	  else
    	  {
    		  type2=identifier_type;
    		  identifier_type="";
    	  }
    	  if(!type2.equals("int"))
    	  {
    		  {System.out.println("Type error");
    		  System.exit(0);
    		  }
    	  }
    	  
      }
      n.f3.accept(this);
      n.f4.accept(this);
      if(flag==0)
      n.f5.accept(this);
      if(flag==1)
      {
    	  identifier_type="";
    	  String id= (String)n.f5.accept(this);
    	  if(identifier_type.equals(""))
    		  type3=id;  
    	  else
    	  {
    		  type3=identifier_type;
    		  identifier_type="";
    	  }
    	  if(!type3.equals("int"))
    	  {
    		  {System.out.println("Type error");
    		  System.exit(0);
    		  }
    	  }
    	  
      }
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n) {
      R _ret=null;
      String type1 = new String();
      n.f0.accept(this);
      n.f1.accept(this);
      if(flag==0)
    	  n.f2.accept(this);
      if(flag==1)
      {
    	  identifier_type="";
    	  String id= (String)n.f2.accept(this);
    	  if(identifier_type.equals(""))
    	  {
    		  type1=id;
    		 // System.out.println("see "+id);
    	  }
    	  else
    	  {
    		  //System.out.println("i am here");
    		  type1=identifier_type;
    		  identifier_type="";
    	  }
    	  //System.out.println("in if");
    	  if(!type1.equals("boolean"))
    	  {
    		 // System.out.println(" current class : "+class_name+" currect method : "+meth_name);
    		 // System.out.println("type is : " +type1);
    		  {System.out.println("Type error");
    		  System.exit(0);
    		  }
    	  }
      }
      n.f3.accept(this);
      n.f4.accept(this);
      
      n.f5.accept(this);
      n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n) {
      R _ret=null;
      String type1 = new String();
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      if(flag==1)
      {
    	  identifier_type="";
    	  String id= (String)n.f2.accept(this);
    	  if(identifier_type.equals(""))
    		  type1=id;  
    	  else
    	  {
    		  type1=identifier_type;
    		  identifier_type="";
    	  }
    	  if(!type1.equals("boolean"))
    	  {System.out.println("Type error");
		  System.exit(0);
		  }
      }
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n) {
      R _ret=null;
      String type1= new String();
      n.f0.accept(this);
      n.f1.accept(this);
      if(flag==0)
    	  n.f2.accept(this);
      else if(flag==1)
      {
    	  //System.out.println("in print " +expression_type);    	 
    	  identifier_type="";
    	  String id= (String)n.f2.accept(this);
    	 // if(identifier_type.equals(""))
    		//  type1=id;  
    	  //else
    		//  type1=identifier_type;
    	  if(!id.equals("int"))
    	  {
    		  //System.out.println("mummy "+id);
    		  {System.out.println("Type error");
    		  System.exit(0);
    		  }
    	  }
      }
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n) {
      R _ret=null;
      if(flag==0)
    	  n.f0.accept(this);
      else
      {
    	  return n.f0.accept(this);  
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n) {

	   String type = new String();
      R _ret=null;
      if(flag==0)
      {
    	  n.f0.accept(this);
    	  n.f1.accept(this);
    	  n.f2.accept(this);
    	  return _ret;
      }
      else
      {
    	  identifier_type="";
    	  String id= (String)n.f0.accept(this);
    	  if(identifier_type.equals(""))
    		  type=id;  
    	  else
    	  {
    		  type=identifier_type; 
    		  identifier_type="";
    	  }
    	  if(!type.equals("boolean"))
    	  {
    		  {System.out.println("Type error");
    		  System.exit(0);
    		  }
    	  }
    	  n.f1.accept(this);
    	  identifier_type="";
    	   id= (String)n.f2.accept(this);
    	  if(identifier_type.equals(""))
    		  type=id;  
    	  else
    	  {
    		  type=identifier_type; 
    		  identifier_type="";
    	  }
    	  if(!type.equals("boolean"))
    	  {
    		  {System.out.println("Type error");
    		  System.exit(0);
    		  }
    	  }
    	  return (R)"boolean";
    	  
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n) {

	   String type= new String();
	  identifier_type="";
      R _ret=null;
      if(flag==0)
      {
    	  n.f0.accept(this);
    	  n.f1.accept(this);
    	  n.f2.accept(this);
    	  return _ret;
      }
      else
      {
    	  identifier_type="";
    	  String id= (String)n.f0.accept(this);
    	  if(identifier_type.equals(""))
    		  type=id;  
    	  else
    	  {
    		  type=identifier_type;  	 
    		  identifier_type="";
    	  }
    	  if(!type.equals("int"))
    	  {
    		  //System.out.println("type : " + type);
    		  {System.out.println("Type error");
    		  System.exit(0);
    		  }
    	  }
    	  n.f1.accept(this);
    	  identifier_type="";
    	   id= (String)n.f2.accept(this);
    	  if(identifier_type.equals(""))
    		  type=id;  
    	  else
    	  {
    		  type=identifier_type;
    		  identifier_type="";
    	  }
    	  
    	  if(!type.equals("int"))
    	  {
    		 // System.out.println(expression_type+"  in compareexpr");
    		  {System.out.println("Type error");
    		  System.exit(0);
    		  }
    	  }
    	//  System.out.println("in comparison");
    	  return (R)"boolean";
    	  
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n) {
      R _ret=null;
      String type = new String();
      if(flag==0)
      {
    	  n.f0.accept(this);
    	  n.f1.accept(this);
    	  n.f2.accept(this);
    	  return _ret;
      }
      else
      {
    	  identifier_type="";
    	  String id= (String)n.f0.accept(this);
    	  if(identifier_type.equals(""))
    		  type=id;  
    	  else
    	  {
    		  type=identifier_type;  
    		  identifier_type="";
    	  }
    	  if(!type.equals("int"))
    	  {
    		  {System.out.println("Type error");
    		  System.exit(0);
    		  }
    	  }
    	  identifier_type="";
    	   id= (String)n.f2.accept(this);
    	  if(identifier_type.equals(""))
    		  type=id;  
    	  else
    	  {
    		  type=identifier_type;
    		  identifier_type="";
    	  }
    	  
    	  if(!type.equals("int"))
    	  {
    		//  System.out.println(expression_type+"  in compareexpr");
    		  {System.out.println("Type error");
    		  System.exit(0);
    		  }
    	  }
    	  return (R)"int";
    	  
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n) {
      R _ret=null;
      String type = new String();
      if(flag==0)
      {
    	  n.f0.accept(this);
    	  n.f1.accept(this);
    	  n.f2.accept(this);
    	  return _ret;
      }
      else
      {
    	  identifier_type="";
    	  String id= (String)n.f0.accept(this);
    	  if(identifier_type.equals(""))
    		  type=id;  
    	  else
    	  {
    		  type=identifier_type;  	
    		  identifier_type="";
    	  }
    	  if(!type.equals("int"))
    	  {
    		  //System.out.println(type);
    		  {System.out.println("Type error");
    		  System.exit(0);
    		  }
    	  }
    	  identifier_type="";
    	   id= (String)n.f2.accept(this);
    	  if(identifier_type.equals(""))
    		  type=id;  
    	  else
    	  {
    		  type=identifier_type;
    		  identifier_type="";
    	  }
    	  
    	  if(!type.equals("int"))
    	  {
    		  //System.out.println(expression_type+"  in compareexpr");
    		  {System.out.println("Type error");
    		  System.exit(0);
    		  }
    	  }
    	  return (R)"int";    	  
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n) {
      R _ret=null;
      String type =  new String();
      if(flag==0)
      {
    	  n.f0.accept(this);
    	  n.f1.accept(this);
    	  n.f2.accept(this);
    	  return _ret;
      }
      else
      {
    	  identifier_type="";
    	  String id= (String)n.f0.accept(this);
    	  if(identifier_type.equals(""))
    		  type=id;  
    	  else
    	  {
    		  type=identifier_type;
    		  identifier_type="";
    	  } 	  
    	  if(!type.equals("int"))
    	  {
    		  //System.out.println("type : " +type );
    		  {System.out.println("Type error");
    		  System.exit(0);
    		  }
    	  }
    	  identifier_type="";
    	   id= (String)n.f2.accept(this);
    	  if(identifier_type.equals(""))
    		  type=id;  
    	  else
    	  {
    		  type=identifier_type;
    		  identifier_type="";
    	  }
    	  
    	  if(!type.equals("int"))
    	  {
    		 // System.out.println(expression_type+"  in compareexpr");
    		  {System.out.println("Type error");
    		  System.exit(0);
    		  }
    	  }
    	  return (R)"int";
    	  
      }
      
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n) {
      R _ret=null;
      String type =new String();
      if(flag==0)
      {
    	  n.f0.accept(this);
    	  n.f1.accept(this);
          n.f2.accept(this);
          n.f3.accept(this);
          return _ret;
      }
      else
      {
    	  identifier_type="";
    	  String id= (String)n.f0.accept(this);
    	  if(identifier_type.equals(""))
    		  type=id;  
    	  else
    	  {
    		  type=identifier_type;
    		  identifier_type="";
    	  }
    	  if(!type.equals("int[]"))
    	  {
    		  {System.out.println("Type error");
    		  System.exit(0);
    		  }
    	  } 
    	  n.f1.accept(this);
    	  identifier_type="";
    	  id= (String)n.f2.accept(this);
    	  if(identifier_type.equals(""))
    		  type=id;  
    	  else
    	  {
    		  type=identifier_type;
    		  identifier_type="";
    	  }
    	  if(!type.equals("int"))
    	  {
    		  {System.out.println("Type error");
    		  System.exit(0);
    		  }
    	  }
    	  return (R)"int";
      }

   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n) {
      R _ret=null;
      String type = new String();
      if(flag==0)
    	  n.f0.accept(this);
      else
      {
    	  identifier_type="";
    	  String id= (String)n.f0.accept(this);
    	  if(identifier_type.equals(""))
    		  type=id;  
    	  else
    	  {
    		  type=identifier_type;
    		  identifier_type="";
    	  }
    	  if(!type.equals("int[]"))
    	  {
    		  {System.out.println("Type error");
    		  System.exit(0);
    		  }
    	  }
    	  return (R)"int";
      }
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n) {
      R _ret=null;
      String pushing = new String();
      identifier_type="";
      in_this=0;
      in_new=0;
     // if(stack.empty())
    	//  System.out.println("yes");
      //else System.out.println("no");
      //System.out.println("stack size is : "+stack.size());
      in_message_send =1;
      if(flag==0)
    	  n.f0.accept(this);
      else if(flag==1)
      {
	      object_called = (String)n.f0.accept(this); //THIS IS THE NAME OF THE IDEINTIFIER.
	      if(identifier_type.equals("")) //this type
	    	  caller_type=class_name;
	      else
	      {   	 
	    	  caller_type= identifier_type;
	    	  identifier_type="";
	      }
      }
      n.f1.accept(this);
      
      if(flag==0)
    	  n.f2.accept(this);
      else if(flag==1)
    	  method_called = (String)n.f2.accept(this);
      n.f3.accept(this);
      if(flag==1)
      {
    	  pushing = "class " + object_called + " " + caller_type + " " + method_called;
    	  stack.push(pushing);
      }
      n.f4.accept(this);//pushing done
      
      n.f5.accept(this);
      if(flag==0)
      {
    	  return _ret;
      }
    	  //once i finish this pushing business; i should do start popping
      
      else
      {
      
    	  String popping = new String("prana liyawalkar");
    	 // System.out.println("substring"+(popping.substring(0, 6)));
    	  while(true)
    	  {
    		  popping = stack.pop();
    		  if(popping.length()>=6)
    		  {
    			  if(!((popping.substring(0, 6)).equals("class ")))
    			  {
    				  //System.out.println("in while1");
    				 
    				  //System.out.println("popping1 and putting in stack2 : "+popping);
    				  stack2.push(popping);
    			  }
    			  else break;
    		  }
    		else
    		{
    			//System.out.println("in while");
				  //System.out.println("popping and putting in stack2 : "+popping);
				  stack2.push(popping);
    		}
    	  }
    	 // if(!stack.empty())
    		//  System.out.println("fuckyou");
    	//  System.out.println("final popping : "+popping);
    	  //now my popping contains the names.
    	  String new_object_called = new String();
    	  String new_method_called = new String();
    	  String new_caller_type = new String();
    	  String[] tokens = popping.split(" ");
    	  new_object_called = tokens[1];
    	  new_method_called = tokens[3];
    	  new_caller_type = tokens[2];
    	  popping = " ";
    	/*  while(!stack2.empty())
    	  {
    		  popping = stack2.pop();
    		  stack3.push(popping);
    	  }
    	  */
    	  String actual_type = new String();
    	 // System.out.println("new_object called : "+new_object_called +" new_method_called : "+new_method_called);
    	  //System.out.println("new_fuckcaller_type : "+new_caller_type +" new_method_called : "+new_method_called);

    	  if(symbol_tab.get(class_name).vars.get(new_object_called)!=null) // a new class type which was previously an object.
    	  {
    		 
    		 int i=1;
    		 int param_count=0;
    		 int flag2=0;
    		 params = new LinkedHashMap<String, String>();
    		 params .putAll(symbol_tab.get(new_caller_type).methods.get(new_method_called).params);
    		 {
    		//	 System.out.println(params);
    			// System.out.println(stack2);
    		 }
    		 if(params.size()!=stack2.size())
			 {System.out.println("Type error");
	    		  System.exit(0);
	    		  } 
    		 while(!stack2.empty())
    		 {
    			
    			popping = stack2.pop();
    			param_count++;
    			i=1;
    			for(String param : params.values())
    			{
    				if((popping.equals(param) || param.equals(parents.get(popping))) && param_count==i)
    				{
    				//	System.out.println("message sent1");	 
    					break;
    				}
    				else if (i==param_count && (!popping.equals(param)))
                    {
                 
    					//System.out.println(popping+param);
    					  {System.out.println("Type error");
    		    		  System.exit(0);
    		    		  }
                     	break;
                    }
                  	else if(i!=param_count)
                  	  i++;
    				
    			}
    		 
    		}
   		  	actual_type = symbol_tab.get(class_name).vars.get(new_object_called);
   		  	return (R)symbol_tab.get(actual_type).methods.get(new_method_called).return_type;
    	  }
    	  
    	 else if(symbol_tab.get(class_name).methods.get(meth_name).locals.get(new_object_called) !=null)
    	  {
    		  
    		 int i=0;
     		 int param_count=0;
     		params = new LinkedHashMap<String, String>();
     		 params .putAll(symbol_tab.get(new_caller_type).methods.get(new_method_called).params);
     		 {
    			// System.out.println(params);
    			 //System.out.println(stack2);
    		 }
     		 if(params.size()!=stack2.size())
			 {System.out.println("Type error");
	    		  System.exit(0);
	    		  } 
     		 while(!stack2.empty())
     		 {
	   			
	   			popping = stack2.pop();
	   			//System.out.println("stack 2 : "+popping);
	   			param_count++;
	   			i=1;
	   			for(String param : params.values())
	   			{
	   				if((popping.equals(param) || param.equals(parents.get(popping))) && param_count==i)
	   				{
	   					//System.out.println("message sent2");	 
	   					break;
	   				}
	   				else if (i==param_count && (!popping.equals(param)))
	                   {
	                
	   					//System.out.println(popping+param);
	   					//System.out.println("i: " +i +" param_count : "+param_count + " ");
	   				  {System.out.println("Type error");
	   	    		  System.exit(0);
	   	    		  }
	                    	break;
	                   }
	                 	else if(i!=param_count)
	                 	  i++;
   				
	   			}
     		}
    		  actual_type = symbol_tab.get(class_name).methods.get(meth_name).locals.get(new_object_called);
    		 // System.out.println("actual type : "+actual_type);
    		 // System.out.println(symbol_tab.get(actual_type).methods.get(new_method_called).return_type);
    		  return (R)(symbol_tab.get(actual_type).methods.get(new_method_called).return_type);
    	  }
    	 
    	  else if(symbol_tab.get(class_name).methods.get(meth_name).params.get(new_object_called) !=null)
    	  {
    		  
    		  int i=0;
      		 int flag2=0;
      		 int param_count=0;
      		params = new LinkedHashMap<String, String>();
      		 params.putAll( symbol_tab.get(new_caller_type).methods.get(new_method_called).params);
      		 {
    			// System.out.println(params);
    			 //System.out.println(stack2);
    		 }
      		 if(params.size()!=stack2.size())
			 {System.out.println("Type error");
	    		  System.exit(0);
	    		  } 
      		 while(!stack2.empty())
      		{
   			
   			popping = stack2.pop();
   			param_count++;
   			i=1;
   			for(String param : params.values())
   			{
   				if((popping.equals(param) || param.equals(parents.get(popping))) && param_count==i)
   				{
   					//System.out.println("message sent31");	 
   					break;
   				}
   				else if (i==param_count && (!popping.equals(param)))
                   {
                
   					//System.out.println(popping+param);
   				  {System.out.println("Type error");
   	    		  System.exit(0);
   	    		  }
                    	break;
                   }
                 	else if(i!=param_count)
                 	  i++;
   				
   			}
      		}
     		  actual_type = symbol_tab.get(class_name).methods.get(meth_name).params.get(new_object_called);
     		  //System.out.println("actual type : "+actual_type);
     		 // System.out.println(symbol_tab.get(actual_type).methods.get(method_called).return_type);

     			return (R)(symbol_tab.get(actual_type).methods.get(new_method_called).return_type); 
    	  }
    	  else if (in_this==1) //this wala method called;
    	  {
    		  //System.out.println("check8");
    		  actual_type = class_name;
    		  in_this=0;
    		  int param_count=0;
    		  int i=0;
    		  params = new LinkedHashMap<String, String>();
    		  params.putAll(symbol_tab.get(class_name).methods.get(new_method_called).params);
    			 {
        		//	 System.out.println(params);
        			// System.out.println(stack2);
        		 }
    			 if(params.size()!=stack2.size())
    			 {System.out.println("Type error");
 	    		  System.exit(0);
 	    		  } 
    		  while(!stack2.empty())
     		 {
     			
     			popping = stack2.pop();
     			param_count++;
     			i=1;
     			for(String param : params.values())
     			{
     				if((popping.equals(param) || param.equals(parents.get(popping))) && param_count==i)
     				{
     					//System.out.println("message sent4");	 
     					break;
     				}
     				else if (i==param_count && (!popping.equals(param)))
                     {
                  
     					//System.out.println(popping+param);
     					  {System.out.println("Type error");
     		    		  System.exit(0);
     		    		  }
                      	break;
                     }
                   	else if(i!=param_count)
                   	  i++;
     				
     			}
     		 }

     				 return (R)symbol_tab.get(actual_type).methods.get(new_method_called).return_type; 
    	  }
    	  else if(in_new==1)
    	  {
    		  //System.out.println("check9");
    		  in_new=0;
    		  //System.out.println("identifier_type :"+ identifier_type);
    		  int param_count=0;
    		  int i=0;
    		  params = new LinkedHashMap<String, String>();
    		 // System.out.println(params);
    		  
    		  params .putAll(symbol_tab.get(new_object_called).methods.get(new_method_called).params);
    		  //System.out.println(params);
    			 {
        			 //System.out.println(params);
        			 //System.out.println(stack2);
        		 }
    			 if(params.size()!=stack2.size())
    			 {System.out.println("Type error");
 	    		  System.exit(0);
 	    		  } 
    		  while(!stack2.empty())
     		 {
     			
     			popping = stack2.pop();
     			param_count++;
     			i=1;
     			for(String param : params.values())
     			{
     				if((popping.equals(param) || param.equals(parents.get(popping))) && param_count==i)
     				{
     					//System.out.println("message sent5");	 
     					break;
     				}
     				else if (i==param_count && (!popping.equals(param)))
                     {
                  
     					//System.out.println(popping+param);
     					  {System.out.println("Type error");
     		    		  System.exit(0);
     		    		  }
                      	break;
                     }
                   	else if(i!=param_count)
                   	  i++;
     				
     			}  
     		 }

    		return (R)symbol_tab.get(new_object_called).methods.get(new_method_called).return_type; 
    		  
    	  }
    	  else if(symbol_tab.get(new_object_called).methods.get(new_method_called)!=null)
    	  {
    		  //System.out.println("check91");
    		  int param_count=0;
    		  int i=0;
    		  params = new LinkedHashMap<String, String>();
    		  params .putAll(symbol_tab.get(new_object_called).methods.get(new_method_called).params);
    			 {
        			// System.out.println(params);
        			 //System.out.println(stack2);
        		 }
    			 if(params.size()!=stack2.size())
    			 {System.out.println("Type error");
 	    		  System.exit(0);
 	    		  } 
    		  while(!stack2.empty())
     		 {
     			
     			popping = stack2.pop();
     			param_count++;
     			i=1;
     			for(String param : params.values())
     			{
     				if((popping.equals(param) || param.equals(parents.get(popping))) && param_count==i)
     				{
     					//System.out.println("message sent6");	 
     					break;
     				}
     				else if (i==param_count && (!popping.equals(param)))
                     {
                  
     					//System.out.println(popping+param);
     					  {System.out.println("Type error");
     		    		  System.exit(0);
     		    		  }
                      	break;
                     }
                   	else if(i!=param_count)
                   	  i++;
     				
     			}  
     		 }

    			  return (R)(symbol_tab.get(new_object_called).methods.get(new_method_called).return_type);
    	  }
    	 
    	  else if(symbol_tab.get(new_caller_type).methods.get(new_method_called)!=null)
    	  {
    		  //System.out.println("i rock");
    		  int param_count=0;
    		  int i=0;
    		  params = new LinkedHashMap<String, String>();
    		  params .putAll( symbol_tab.get(new_caller_type).methods.get(new_method_called).params);
    			 {
        			// System.out.println(params);
        			 //System.out.println(stack2);
        		 }
    			 if(params.size()!=stack2.size())
    			 {System.out.println("Type error");
 	    		  System.exit(0);
 	    		  } 
    		  while(!stack2.empty())
      		 {
      			
      			popping = stack2.pop();
      			param_count++;
      			i=1;
      			for(String param : params.values())
      			{
      				if((popping.equals(param) || param.equals(parents.get(popping))) && param_count==i)
      				{
      					//System.out.println("message sent7");	 
      					break;
      				}
      				else if (i==param_count && (!popping.equals(param)))
                      {
                   
      					//System.out.println(popping+param);
      				  {System.out.println("Type error");
      	    		  System.exit(0);
      	    		  }
                       	break;
                      }
                    	else if(i!=param_count)
                    	  i++;
      				
      			}  
      		 }
     		 
    		 return (R)symbol_tab.get(new_caller_type).methods.get(new_method_called).return_type;
    	  }
    	  else
    	  {
    		//  System.out.println("object called : "+new_object_called +" method_called : "+new_method_called);
    		  //System.out.println("check10");
    		
    		  return null;
    	  }
      }
    	 //System.out.println("object : " +object_called+" method_called : "+method_called);
    	 //System.out.println("pappa "+symbol_tab.get(object_called).methods.get(method_called).return_type);
    	  
      
      }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n) {
	   //first parameter

	  identifier_type="";
	  String type = new String();
      R _ret=null;
      if(flag==0)
    	  n.f0.accept(this);
     
      if(flag==1)
      {	      	  
    	  identifier_type="";
	      String id= (String)n.f0.accept(this);
	      if(identifier_type.equals(""))
	    	  type=id;  
	      else
	      {
	    	  type=identifier_type;
	    	  identifier_type="";
	      }
    	  //System.out.println("caller : " +caller_type + "  method_called  "+ method_called + " type : "+ type);
          if(type.equals("int") || type.equals("int[]") || type.equals("boolean") || symbol_tab.get(type)!=null)
          {  
        	  stack.push(type);
        	  //System.out.println("Type pushing : "+ type);
          }
            
    }
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n) {
      R _ret=null;
      n.f0.accept(this);
      String id = new String();
      String type = new String();
      identifier_type="";
      if(flag==0)
    	  n.f1.accept(this);
       //incremented my param_count
      if(flag==1)
      {	  identifier_type="";
    	  id = (String)n.f1.accept(this);
    	  if(identifier_type.equals(""))
    		  type=id;  
    	  else
    	  {
    		  type=identifier_type;
    		  identifier_type="";
    	  }
    	  //System.out.println("in expression rest +" +type);
            if(type.equals("int") || type.equals("int[]") || type.equals("boolean") || symbol_tab.get(type)!=null)
            {
            	//System.out.println("Type pushing : " +type);
            	stack.push(type);
            }
      }

      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n) {
      R _ret=null;
     
      if(flag==0)
      {
    	  n.f0.accept(this);
    	  return _ret;
      }
      else
      {
    	  
    	  return n.f0.accept(this);
      }
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
	   R _ret=null;
	   n.f0.accept(this);
	   if(flag==0)
		   return _ret;
	   else
		   return (R)"int";
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n) {
      R _ret=null;
      n.f0.accept(this);
	   if(flag==0)
		   return _ret;
	   else
		   return (R)"boolean";
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n) {
      R _ret=null;
      n.f0.accept(this);
	   if(flag==0)
		   return _ret;
	   else
		   return (R)"boolean";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n) {
      //TA CODE:
	   if(flag==0)
	   {
		   n.f0.accept(this);
		   return (R)n.f0.toString();
	   }
	   else
	   {
		   
		   if(check_if_coming_from_new_or_not==1) //it is a class type
		   {
			   check_if_coming_from_new_or_not=0;
			 //  System.out.println("fuck");
			   n.f0.accept(this);
			   String id = n.f0.toString();
			   if(symbol_tab.get(id)!=null)
			   {
				   class_type_or_not=1;
//				  / System.out.println("rocking");
				   identifier_type=id;
				   return (R)n.f0.toString();
			   }
		   }
		   Class_info_temp = symbol_tab.get(class_name);
		   methods = new LinkedHashMap<String, method>();
		   methods .putAll( Class_info_temp.methods);
		   vars = new LinkedHashMap<String, String>();
		   vars.putAll(Class_info_temp.vars);
		  // if(symbol_tab.get("Pranali").methods.get("Comp").params.get("l")!=null)
//		   	/	  System.out.println("kill me" + symbol_tab.get("Pranali").methods.get("Comp").params.get("l"));
		   if(meth_name.equals("")) //it can be there only in the class variables
			   identifier_type =  vars.get(n.f0.toString());
		   else
		   {
			   params = new LinkedHashMap<String, String>();
			   params .putAll( methods.get(meth_name).params);
			   locals = new LinkedHashMap<String, String>();
			   locals .putAll( methods.get(meth_name).locals);
			   
			//   System.out.println("class : " +class_name +"meth_name : "+meth_name);
			   
			   //System.out.println("check3 "+n.f0.toString());
			   if(params.get(n.f0.toString())!=null)
			   {
				   //System.out.println("check "+n.f0.toString());
				   identifier_type = params.get(n.f0.toString());
			   }
			   else if(locals.get(n.f0.toString())!=null)
			   {
				  // System.out.println("check2 "+n.f0.toString());
				   identifier_type =locals.get(n.f0.toString());  
			   }
			   else if(vars.get(n.f0.toString())!=null)
			   {
				   //System.out.println("checkcheck "+n.f0.toString());
				   identifier_type =vars.get(n.f0.toString());
			   }
			   /*
			   else if(in_message_send==1)
			   {
				   in_identifier_else=1;
				   in_message_send=0;
				   prev_identifier_type = identifier_type;
				   identifier_type=symbol_tab.get(caller_type).methods.get(n.f0.toString()).return_type;	   
			   }*/
		   }
		//  System.out.println("fuckme" + identifier_type);
		  return (R)n.f0.toString();
	   }
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n) {
      R _ret=null;
      n.f0.accept(this);
      in_this =1;
      if(flag==0)
    	  return _ret;
      else
      {
    	 // System.out.println("in this");
    	  identifier_type="";
    	  return (R)class_name;
      }
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n) {
	   
      R _ret=null;
      String type =new String();
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
     
      if(flag==1)
      {

    		  String id= (String)n.f3.accept(this);
        	  if(identifier_type.equals(""))
        		  type=id;  
        	  else
        	  {
        		  type=identifier_type;
        		  identifier_type="";
        	  }
    		  //System.out.println(type);
    		  if(!type.equals("int"))
    		  {
    		      n.f4.accept(this);
    		      {System.out.println("Type error");
        		  System.exit(0);
        		  }
    			  return null;
    		  }
    	      n.f4.accept(this);
    		  return (R)"int[]";
      }
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n) {  
	      R _ret=null;
	      
	      in_new=1;
	      n.f0.accept(this);
	      if(flag==0)
	      {
	    	  
	    	  n.f1.accept(this);
		      n.f2.accept(this);
		      n.f3.accept(this);
		      return _ret;
	      }
	      else 
	      {
	    	  check_if_coming_from_new_or_not=1;
	    	//  System.out.println("in allocation expression");
	    	  String id =(String) n.f1.accept(this);
	    	  
	    	  if(class_type_or_not==1)
	    	  {
	    		  class_type_or_not=0;//it is a class type.
	    		  return (R)identifier_type; //returning type. class type essentially
	    	  }
	    	  else
	    	  {
	    		  {System.out.println("Type error");
	    		  System.exit(0);
	    		  }
	    		  return null;
	    	  }
	      }
	    	  
	   //this identifier is essentially a class name.
	   
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n) {
      R _ret=null;
      String type = new String();
      n.f0.accept(this);
      if(flag==1)
      {
    	  identifier_type="";
    	  String id= (String)n.f1.accept(this);
    	  if(identifier_type.equals(""))
    		  type=id;  
    	  else
    	  {
    		  type=identifier_type;
    		  identifier_type="";
    	  }
    	  if(!type.equals("boolean"))
    	  {System.out.println("Type error");
		  System.exit(0);
		  }
    	  return (R)"boolean";
      
      }
      else
      {
    	  n.f1.accept(this);
    	  return _ret;
      }
    	  
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n) {
      R _ret=null;
      
      n.f0.accept(this);
      in_bracketed=1;
      if(flag==0)
      {
    	  n.f1.accept(this);
      	  n.f2.accept(this);
    	  return _ret;
      }
      else
      {
    	 String s = (String)n.f1.accept(this);
    	 
    	 //System.out.println("in bracketed "+s);
    	 n.f2.accept(this);
    	 in_bracketed=0;
    	  return (R)s;
      }
   }

}
