//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class final_ra_visitor2<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	String proc_name = new String();
	private LinkedHashMap<String,locals> proc_temp_info4 = new LinkedHashMap<String,locals>();
	private Vector<String> params = new Vector<String>();
	int in_call=0;
	int coming_from_call=0;
	int number_of_params =0;
	String noop_label = new String();
	int spilled1=0;
	int spilled2=0;
	
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            String s = (String)e.nextElement().accept(this);
            if(in_call==1)
            	params.add(s);
            
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      
      
      
      proc_name="MAIN";
      //System.out.println("MAIN" + "[" + proc_temp_info.get(proc_name).args1+"]["+proc_temp_info.get(proc_name).args2+"] ["+proc_temp_info.get(proc_name).args3+"]");
      System.out.println("MAIN" + "[" + proc_temp_info4.get(proc_name).args1+"][1015] ["+proc_temp_info4.get(proc_name).args3+"]");
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      System.out.println("END");
      n.f3.accept(this);
      n.f4.accept(this);
      
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public void get_temp_info(LinkedHashMap<String,locals> intervals1)
   {
	   proc_temp_info4 = intervals1;
	   //System.out.println("---------------------");
	   //System.out.println(intervals1.get("LL_Start").temp_info.get("TEMP 161").regs+" "+intervals1.get("LL_Start").temp_info.get("TEMP 161").start+" "+intervals1.get("LL_Start").temp_info.get("TEMP 161").end);
	   //System.out.println(proc_temp_info4.get("LL_Start").temp_info.get("TEMP 161").regs);
	   //System.out.println("-----------------------");
	  // print_function();
   }
   void print_function()
	{
		Iterator it = proc_temp_info4.entrySet().iterator();
	    while(it.hasNext())
	    {
	    	
	           Map.Entry pairs1=(Map.Entry)it.next();
	           String proc_name = (pairs1.getKey()).toString();
	           System.out.println(proc_name+"  " +proc_temp_info4.get(proc_name).args1+"  "+proc_temp_info4.get(proc_name).args2+"  " +proc_temp_info4.get(proc_name).args3);
	           locals v = proc_temp_info4.get(pairs1.getKey());
	           Iterator it2 = v.temp_info.entrySet().iterator();
	           while(it2.hasNext()){
	               Map.Entry pairs2 = (Map.Entry)it2.next();
	               interval r = v.temp_info.get(pairs2.getKey());
	               String temp = pairs2.getKey().toString();
	               System.out.println("Start : "+r.start+" End : "+ r.end+" "+r.temp+" "+r.regs);
	               }
	           }
		
	}
   
   public R visit(StmtList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n) {
      R _ret=null;
      
      String s0 = (String)n.f0.accept(this);
      proc_name = s0;
      n.f1.accept(this);
      String s2 = (String)n.f2.accept(this);
      n.f3.accept(this);
      number_of_params = Integer.parseInt(s2);
      //System.out.println(s0 + "[" + proc_temp_info4.get(proc_name).args1+"]["+proc_temp_info4.get(proc_name).args2+" ][ "+proc_temp_info4.get(proc_name).args3+"]");
      System.out.println(s0 + "[" + proc_temp_info4.get(proc_name).args1+"][1015 ][ "+proc_temp_info4.get(proc_name).args3+"]");

      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      
      System.out.println(noop_label+ " NOOP");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      n.f0.accept(this);
      System.out.println("ERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String s1 = (String)n.f1.accept(this);
      s1 = proc_temp_info4.get(proc_name).temp_info.get(s1).regs;
      String s2 = (String)n.f2.accept(this);
      if(s1.startsWith("SPILL"))
      {
    	  System.out.println("ALOAD v1 " +s1);
    	  s1 = "v1";
      }
      System.out.println("CJUMP "+s1+" "+s2);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String s1 = (String)n.f1.accept(this);
      System.out.println("JUMP "+s1);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String s1 = (String)n.f1.accept(this);
      String s5 = (String)n.f2.accept(this);
      String s2 = (String)n.f3.accept(this);
      String s3,s4 = new String();
      s1 = proc_temp_info4.get(proc_name).temp_info.get(s1).regs;
      s2 = proc_temp_info4.get(proc_name).temp_info.get(s2).regs;
      
      s3=s1;
      s4=s2;
      
      if(s1.startsWith("SPILL") && s2.startsWith("SPILL"))
	  {
		  spilled1=1;
		  spilled2=1;
		  System.out.println("ALOAD v1 "+s1);
		  System.out.println("ALOAD v0 "+s2);
		  s3="v1";
		  s4="v0";
	  }
	  else if ((!s1.startsWith("SPILL")) && s2.startsWith("SPILL"))
	  {
		  spilled2=1;
		  System.out.println("ALOAD v1 "+s2);
		  s4="v1";
	  }
	  else if ((s1.startsWith("SPILL")) && !s2.startsWith("SPILL"))
	  {
		  spilled1=1;
		  System.out.println("ALOAD v1 "+s1);
		  s3="v1";
	  }
      System.out.println("HSTORE "+s3+" "+s5+" "+s4);

     /* if(s3.equals("v1"))
	  {
		  System.out.println("ASTORE "+s1+" v1");
	  }*/
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String s1 = (String)n.f1.accept(this);
      String s2 = (String)n.f2.accept(this);
      String s5 = (String)n.f3.accept(this);
      String s3,s4 = new String();
     
      s1 = proc_temp_info4.get(proc_name).temp_info.get(s1).regs;
      s2 = proc_temp_info4.get(proc_name).temp_info.get(s2).regs;
      s3=s1;
      s4=s2;
      
      if(s1.startsWith("SPILL") && s2.startsWith("SPILL"))
	  {
		  spilled1=1;
		  spilled2=1;
		  System.out.println("ALOAD v1 "+s1);
		  System.out.println("ALOAD v0 "+s2);
		  s3="v1";
		  s4="v0";
	  }
	  else if ((!s1.startsWith("SPILL")) && s2.startsWith("SPILL"))
	  {
		  spilled2=1;
		  System.out.println("ALOAD v1 "+s2);
		  s4="v1";
	  }
	  else if ((s1.startsWith("SPILL")) && !s2.startsWith("SPILL"))
	  {
		  spilled1=1;
		  System.out.println("ALOAD v1 "+s1);
		  s3="v1";
	  }
      
      System.out.println("HLOAD "+s3+" "+s4+" "+s5);
      if(s3.equals("v1"))
	  {
		  System.out.println("ASTORE "+s1+" v1");
	  }
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
      n.f0.accept(this);
      coming_from_call=0;
      String s1 = (String)n.f1.accept(this);
	  //System.out.println("in move : "+s1+" "+proc_temp_info4.get(proc_name).temp_info.get(s1).regs);
      String s2 = (String)n.f2.accept(this);
      //System.out.println("s1 checking "+s1);
      s1 = proc_temp_info4.get(proc_name).temp_info.get(s1).regs;
      String s3,s4 = new String();
      //System.out.println("new s1 checking "+s1);
      if(s2==null)
    	  s2="pranali";
      else if(s2.startsWith("TEMP"))
    	  s2 = proc_temp_info4.get(proc_name).temp_info.get(s2).regs;
      if(coming_from_call==1)
      {
    	  coming_from_call=0;
    	  s3=s1;
    	  s4=s2;
    	  if(s1.startsWith("SPILL") && s2.startsWith("SPILL"))
    	  {
    		  spilled1=1;
    		  spilled2=1;
    		  //System.out.println("ALOAD v1 "+s1);
    		  System.out.println("ALOAD v0 "+s2);
    		  s3="v1";
    		  s4="v0";
    	  }
    	  else if ((!s1.startsWith("SPILL")) && s2.startsWith("SPILL"))
    	  {
    		  spilled2=1;
    		  System.out.println("ALOAD v1 "+s2);
    		  s4="v1";
    	  }
    	  else if ((s1.startsWith("SPILL")) && !s2.startsWith("SPILL"))
    	  {
    		  spilled1=1;
    		  //System.out.println("ALOAD v1 "+s1);
    		  s3="v1";
    	  }
    	  System.out.println("MOVE "+s3 + "  v0 ");
    	  if(s3.equals("v1"))
    	  {
    		  System.out.println("ASTORE "+s1+" v1");
    	  }
      }
      else
      {
    	  if(s2.startsWith("TEMP "))
        	  s2 = proc_temp_info4.get(proc_name).temp_info.get(s2).regs;
    	  s3=s1;
    	  s4=s2;

    	  if(s1.startsWith("SPILL") && s2.startsWith("SPILL"))
    	  {
    		  spilled1=1;
    		  spilled2=1;
    		  //System.out.println("ALOAD v1 "+s1);
    		  System.out.println("ALOAD v0 "+s2);
    		  s3="v1";
    		  s4="v0";
    	  }
    	  else if ((!s1.startsWith("SPILL")) && s2.startsWith("SPILL"))
    	  {
    		  spilled2=1;
    		  System.out.println("ALOAD v1 "+s2);
    		  s4="v1";
    	  }
    	  else if ((s1.startsWith("SPILL")) && !s2.startsWith("SPILL"))
    	  {
    		  spilled1=1;
    		  //System.out.println("ALOAD v1 "+s1);
    		  s3="v1";
    	  }
    	  System.out.println("MOVE "+s3+" "+s4);
    	  if(s3.equals("v1"))
    	  {
    		  System.out.println("ASTORE "+s1+" v1");
    	  }
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String s1 = (String)n.f1.accept(this);
      if(s1.startsWith("TEMP "))
    	  s1 = proc_temp_info4.get(proc_name).temp_info.get(s1).regs;
      if(s1.startsWith("SPILL"))
      {
    	  System.out.println("ALOAD v1 "+s1);
    	  s1 = "v1";
      }
      System.out.println("PRINT "+s1);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n) {
      R _ret=null;
     String s = (String) n.f0.accept(this);
      return (R)s;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n) {
      R _ret=null;
      int i=0;
      for(i=0;i<8;i++)
      {
    	  System.out.println("ASTORE SPILLEDARG "+ (i+500)+ " s"+i);
      }
      for(i=0;i<number_of_params && i<4;i++)
      {
    	  System.out.println("MOVE s"+i+" a"+i);
    	  String temp = new String();
    	  temp = "TEMP "+i;
    	  proc_temp_info4.get(proc_name).temp_info.get(temp).regs="s"+i;
      }
      for(i=4;i<number_of_params;i++)
      {
    	  
      }
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String s3 = (String)n.f3.accept(this);
      n.f4.accept(this);
      if(s3.startsWith("TEMP "))
    	  s3 = proc_temp_info4.get(proc_name).temp_info.get(s3).regs;
      if(s3.startsWith("SPILL"))
      {
    	System.out.println("ALOAD v1 "+s3);
    	s3="v1";
      }
      System.out.println("MOVE v0 "+s3);
      for(i=0;i<8;i++)
      {
    	  System.out.println("ALOAD s"+i+ " SPILLEDARG "+ (i+500));
      }
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n) {
      R _ret=null;
      in_call=1;
      n.f0.accept(this);
      //storing all the t registers
      int i=0;
 
      String s1 = (String)n.f1.accept(this);
      String reg= new String();
      n.f2.accept(this);
      n.f3.accept(this);
     
      
      for(i=0;i<params.size();i++)
      {
    	  reg = proc_temp_info4.get(proc_name).temp_info.get(params.get(i)).regs;
    	  if(i<4)
    	  {
    		  if(reg.startsWith("SPILL"))
    		  {
    			  System.out.println("ALOAD v1 "+reg);
    			  reg="v1";
    		  }
    		  System.out.println("MOVE a"+i+" "+reg);
    	  }
    	  else
    	  {
    		  if(reg.startsWith("SPILL"))
    		  {
    			  System.out.println("ALOAD v1 "+reg);
    			  reg="v1";
    		  }  
    		  System.out.println("PASSARG "+(i-3)+" "+reg);
    	  }
      }
      for(i=1000;i<1010;i++)
    	  System.out.println("ASTORE SPILLEDARG "+ i+ " t"+(i-1000));
      String s3 = new String();
      
      //System.out.println("check "+s1);
      if(s1.startsWith("TEMP "))
    	  s1 = proc_temp_info4.get(proc_name).temp_info.get(s1).regs;
      s3=s1;
      if(s1.startsWith("SPILL"))
      {
    	  //System.out.println("fuckme");
    	  System.out.println("ALOAD v1 "+s1);
    	  spilled1=1;
    	  s3="v1";
      }
      System.out.println("CALL "+s3);
      if(s3.equals("v1"))
      {
    	  System.out.println("ASTORE "+s1+" v1 ");
    	  spilled1=0;
      }
      n.f4.accept(this);
      in_call=0;
      params.clear();
      params = new Vector<String>();
      coming_from_call=1;
      for(i=1000;i<1010;i++)
    	  System.out.println("ALOAD t"+(i-1000)+ " SPILLEDARG "+ i);
      return _ret;
      
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      n.f0.accept(this);
      String s1 = (String) n.f1.accept(this);
      String s3 = new String();
      if(s1.startsWith("TEMP"))
   	   s1 = proc_temp_info4.get(proc_name).temp_info.get(s1).regs;
      s3=s1;
      if(s1.startsWith("SPILL"))
      {
    	  System.out.println("ALOAD v1 "+s1);
    	  spilled1=1;
    	  s3="v1";
      }
      return (R)("HALLOCATE "+s3);
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n) {
      R _ret=null;
      String s0 = (String)n.f0.accept(this);
      String s1 = (String)n.f1.accept(this);
      String s2 = (String)n.f2.accept(this);
      String reg1 = proc_temp_info4.get(proc_name).temp_info.get(s1).regs;
      String reg2 = new String();
      if(s2.startsWith("TEMP"))
    	   s2 = proc_temp_info4.get(proc_name).temp_info.get(s2).regs;
      String s3 ,s4 = new String();
      {
    	  s3=reg1;
    	  s4=s2;
    	  if(s3.startsWith("SPILL") && s2.startsWith("SPILL"))
    	  {
    		  spilled1=1;
    		  spilled2=1;
    		  System.out.println("ALOAD v1 "+reg1);
    		  System.out.println("ALOAD v0 "+s2);
    		  s3="v1";
    		  s4="v0";
    	  }
    	  else if ((!s3.startsWith("SPILL")) && s2.startsWith("SPILL"))
    	  {
    		  spilled2=1;
    		  System.out.println("ALOAD v1 "+s2);
    		  s4="v1";
    	  }
    	  else if ((s3.startsWith("SPILL")) && !s2.startsWith("SPILL"))
    	  {
    		  spilled1=1;
    		  System.out.println("ALOAD v1 "+reg1);
    		  s3="v1";
    	  }
    	  
      }
      
      return (R)(s0+" "+s3+" "+s4);
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n) {
      R _ret=null;
      int which = n.f0.which;
      String s = " ";
      switch (which)
      {
      case 0 : {s="LT"; break;}
      case 1 : {s= "PLUS"; break;}
      case 2 : {s= "MINUS";break;}
      case 3 : {s= "TIMES"; break;}
      }
      
      return (R)s;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n) {
      R _ret=null;
      String s0 = (String)n.f0.accept(this);
      return (R)s0;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n) {
      R _ret=null;
      n.f0.accept(this);
      String s1 = (String)n.f1.accept(this);
      return (R)("TEMP "+s1);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
      R _ret=null;
      Integer my_int = Integer.parseInt(n.f0.tokenImage);
      return (R)Integer.toString(my_int);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=null;
      String s0 = n.f0.toString();
      noop_label = s0;
      return (R)s0;
   }

}
