//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class final_ra_visitor<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	private LinkedHashMap<String,locals> proc_temp_info = new LinkedHashMap<String,locals>();
	private LinkedHashMap<String, Integer > label_info  = new LinkedHashMap<String,Integer>();
	int coming_from_label=0;
	private Vector<String> params = new Vector<String>();
	int number_of_calls=0;
	String current_label = new String();
	int in_call=0;
	
	private int stmt_number=0;
	String proc_name = "";
	
   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         params.clear();
         params = new Vector<String>();
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            String s = (String)(e.nextElement().accept(this));
            if(in_call==1)
            params.add(s);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      proc_name="MAIN";
      locals local = new locals();
      local.args1=0;
      local.args2=0;
      local.args3=0;
      proc_temp_info.put(proc_name,local);
      
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      
      //System.out.println("praali");
      //System.out.println(temp_info.size());
      int i=0;
      int total_size=0;
      
       /*Iterator it = proc_temp_info.entrySet().iterator();
       while(it.hasNext()){
              Map.Entry pairs1=(Map.Entry)it.next();
              System.out.println(pairs1.getKey());
              locals v = proc_temp_info.get(pairs1.getKey());
             System.out.println(v.args1+"  "+v.args3); 
              Iterator it2 = v.temp_info.entrySet().iterator();
              while(it2.hasNext()){
                  Map.Entry pairs2 = (Map.Entry)it2.next();
                  //System.out.println(pairs2.getKey());
                  interval r = v.temp_info.get(pairs2.getKey());
                 // System.out.println("Start : "+r.start+" End : "+ r.end);
                 // System.out.println("Start : "+r.start);
              }
       } */
     
      proc_temp_info.get(proc_name).args2=proc_temp_info.get(proc_name).args2+8+(10*number_of_calls);
      return _ret;
   }
   public LinkedHashMap<String,locals> return_temp_info()
   {
	   return proc_temp_info;
	   
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n) {
      R _ret=null;
      String s0 = (String)n.f0.accept(this);
      n.f1.accept(this);
      proc_temp_info.get(proc_name).args2=proc_temp_info.get(proc_name).args2+8+(10*number_of_calls);
      number_of_calls=0;
      proc_name=s0;
      locals local = new locals();
      proc_temp_info.put(proc_name,local);
      //System.out.println("PROC NAME "+s0);
      String s2 = (String)n.f2.accept(this);
      int total = Integer.parseInt(s2);
      proc_temp_info.get(proc_name).args1=total;
      if(total>4)
      {
    	  proc_temp_info.get(proc_name).args2=proc_temp_info.get(proc_name).args2+(total-4);
      }
      //System.out.println("TOTAL "+total);
      int i=0;
      for(i=0;i<total;i++)
      {
    	  interval new_interval = new interval();
    	  new_interval.end=stmt_number;
    	  new_interval.start=stmt_number;
    	  new_interval.regs = "-1";
    	  new_interval.temp = "TEMP "+i;
    	  interval intervals1 = new interval();
    	  proc_temp_info.get(proc_name).temp_info.put(new_interval.temp, new_interval);
    	  
      }
      //System.out.println(temp_info.get("TEMP 0").size());
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n) {
      R _ret=null;
      stmt_number++;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      if(coming_from_label==1)
      {
    	  coming_from_label=0;
    	  label_info.put(current_label, stmt_number);
      }
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "CJUMP" UPDATE THE END POINT IN CJUMP
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String s1 = (String) n.f1.accept(this);
      //THAT TEMP SHOULD BE TEHRE
      proc_temp_info.get(proc_name).temp_info.get(s1).end=stmt_number;
      String s2 = (String)n.f2.accept(this);
      if(label_info.get(s2)!=null && label_info.get(s2)<stmt_number);
      {
    	  //System.out.println(s2);
    	  if(label_info.get(s2)!=null)
    	  {
    		  if(label_info.get(s2)<stmt_number)
    		  {
    	  	int label_statememt =  label_info.get(s2);
    	  locals v = proc_temp_info.get(proc_name);
           Iterator it2 = v.temp_info.entrySet().iterator();
           while(it2.hasNext()){
               Map.Entry pairs2 = (Map.Entry)it2.next();
               interval r = v.temp_info.get(pairs2.getKey());
               if(r.end>label_statememt && r.end<stmt_number)
               {
            	   r.end=stmt_number;
            	   v.temp_info.put(pairs2.getKey().toString(), r);
            	   proc_temp_info.put("proc_name",v);
               }
           }
    		  }
    	  }
      }
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String s2= (String)n.f1.accept(this);
     
    	  if(label_info.get(s2)!=null)
    	  {
    		  if(label_info.get(s2)<stmt_number)
    		  {
    	  int label_statement =label_info.get(s2);
    	  locals v = proc_temp_info.get(proc_name);
           Iterator it2 = v.temp_info.entrySet().iterator();
           while(it2.hasNext()){
               Map.Entry pairs2 = (Map.Entry)it2.next();
               interval r = v.temp_info.get(pairs2.getKey());
               if(r.end>label_statement && r.end<stmt_number)
               {
            	   r.end=stmt_number;
            	   v.temp_info.put(pairs2.getKey().toString(), r);
            	   proc_temp_info.put("proc_name",v);
               }
           }
    		  }
    	  }
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String s1 = (String)n.f1.accept(this); //contains TEMP 23, could have been declared now.
      n.f2.accept(this);
      String s3 = (String)n.f3.accept(this); //should have been declared previously.
      proc_temp_info.get(proc_name).temp_info.get(s1).end=stmt_number;
      proc_temp_info.get(proc_name).temp_info.get(s3).end=stmt_number;
      return _ret;
   }

   /**
    * f0 -> "HLOAD" //assuming that temp1 may have been newly declared here and temp2 has been declared before too
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String s1 = (String) n.f1.accept(this);
      String s2 = (String) n.f2.accept(this);
      if(proc_temp_info.get(proc_name).temp_info.get(s1)==null)
      {
    	  interval new_interval = new interval();
    	  new_interval.end=stmt_number;
    	  new_interval.start=stmt_number;
    	  new_interval.regs = "-1";
    	  new_interval.temp = s1;
    	  interval intervals1 = new interval();
    	  proc_temp_info.get(proc_name).temp_info.put(s1, new_interval);
      }
      else
      {
    	  proc_temp_info.get(proc_name).temp_info.get(s1).end=stmt_number;
      }
     
      proc_temp_info.get(proc_name).temp_info.get(s2).end=stmt_number;
      n.f3.accept(this);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String s1 =(String) n.f1.accept(this);
      if(proc_temp_info.get(proc_name).temp_info.get(s1)==null)
      {
    	  interval new_interval = new interval();
    	  new_interval.end=stmt_number;
    	  new_interval.start=stmt_number;
    	  new_interval.regs = "-1";
    	  new_interval.temp = s1;
    	  interval intervals1 = new interval();
    	  proc_temp_info.get(proc_name).temp_info.put(s1, new_interval);
    	 // System.out.println("MOVE "+temp_info.get(s1).size());
      }
      else
      {
    	  proc_temp_info.get(proc_name).temp_info.get(s1).end=stmt_number;
    	  //System.out.println("MOVE "+temp_info.get(s1).size());
      }
      
      String s2 = (String)n.f2.accept(this);
     // if(s2!=null && s2.equals("TEMP 43"))
    	//  System.out.println("fuck me");
      if(s2!=null && s2.startsWith("TEMP") )
    	  proc_temp_info.get(proc_name).temp_info.get(s2).end = stmt_number;
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n) {
      R _ret=null;
      n.f0.accept(this);
      String s1 = (String)n.f1.accept(this);
      if(s1!=null && s1.startsWith("TEMP "))
    	  proc_temp_info.get(proc_name).temp_info.get(s1).end = stmt_number;
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n) {
      R _ret=null;
     String s = (String) n.f0.accept(this);
      return (R)s;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      String s3 = (String)n.f3.accept(this);
      stmt_number++;
      if(s3!=null && s3.startsWith("TEMP"))
    	  proc_temp_info.get(proc_name).temp_info.get(s3).end = stmt_number;
      
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n) {
      R _ret=null;
      n.f0.accept(this);
      //stmt_number++;
      in_call=1;
      number_of_calls++;
      String s1 = (String)n.f1.accept(this);
      if(s1!=null && s1.startsWith("TEMP"))
      {
    	  proc_temp_info.get(proc_name).temp_info.get(s1).end=stmt_number;
      }
   
      n.f2.accept(this);
      n.f3.accept(this);
      int i=0;
      if(proc_temp_info.get(proc_name).args3<params.size())
    	  proc_temp_info.get(proc_name).args3=params.size();
      //System.out.println(params);
      for(i=0;i<params.size();i++)
      {
    	  proc_temp_info.get(proc_name).temp_info.get(params.get(i)).end=stmt_number;
      }
      n.f4.accept(this);
      in_call=0;
      params.clear();
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n) {
      R _ret=null;
      n.f0.accept(this);
      String s1 = (String)n.f1.accept(this);
      if(s1!=null && s1.startsWith("TEMP"))
    	  proc_temp_info.get(proc_name).temp_info.get(s1).end=stmt_number;
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n) {
      R _ret=null;
      n.f0.accept(this);
     String s1 = (String) n.f1.accept(this);
	  proc_temp_info.get(proc_name).temp_info.get(s1).end=stmt_number;
	  
      String s2 = (String)n.f2.accept(this);
      if(s2!=null && s2.startsWith("TEMP"))
      {
    	  proc_temp_info.get(proc_name).temp_info.get(s2).end=stmt_number;
      }
      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n) {
      R _ret=null;
      String s = (String)n.f0.accept(this);
      return (R)s;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n) {
      R _ret=null;
      n.f0.accept(this);
      String s1 = (String)n.f1.accept(this);
      return (R)("TEMP "+s1);
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n) {
     
      Integer my_int = Integer.parseInt(n.f0.tokenImage);
      return (R)Integer.toString(my_int);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n) {
      R _ret=null;
      String s0 = n.f0.toString();
      coming_from_label=1;
      current_label = s0;
      return (R)s0;
   }

}
